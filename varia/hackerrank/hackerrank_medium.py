# www.hackerrank.com
# alexey-sin@yandex.ru
# 15071971
# =============================================================================
# Write a function
# В григорианском календаре для определения високосных лет используются три условия:
     # Год делится на 4, это високосный год, если:
         # Год делится на 100, это НЕ високосный год, если:
             # Год также делится на 400 без остатка. Тогда это високосный год.

# Это означает, что в григорианском календаре 2000 и 2400 годы являются високосными,
# а 1800, 1900, 2100, 2200, 2300 и 2500 - НЕ високосными. 

# def is_leap(year):
    # leap = False
    
    # if year % 4 == 0:
        # leap = True
        # if year % 100 == 0:
            # if year % 400 != 0:
                # leap = False
    
    # return leap

# year = int(input())
# print(is_leap(year))
# =============================================================================
# The Minion Game
# Обоим игрокам дается одна и та же строка, 
# Оба игрока должны составлять подстроки, используя буквы строки. 
# Стюарт должен составлять слова, начинающиеся с согласных.
# Кевину приходится составлять слова, начинающиеся с гласных.
# Игра заканчивается, когда оба игрока составили все возможные подстроки. 
# Подсчет очков
# Игрок получает +1 балл за каждое вхождение подстроки в строку.
# Строка = БАНАНА
# Начальное слово гласной Кевина = АНА
# Здесь ANA встречается дважды в BANANA. Следовательно, Кевин получит 2 очка.
# Ваша задача - определить победителя игры и его счет
# Выведите одну строку: имя победителя и его счет, разделенные пробелом.
# Если игра закончилась вничью, выведите Draw

# def minion_game(string):
    # ln = len(string)
    # res1 = res2 = 0

    # for i in range(ln):
        # if string[i] in 'AEIOU':
            # res1 += ln - i
        # else:
            # res2 += ln - i

    # if res1 > res2:
        # print('Kevin', res1)
    # elif res2 > res1:
        # print('Stuart', res2)
    # else:
        # print('Draw')

# if __name__ == '__main__':
    # s = input()
    # minion_game(s)
    # minion_game('BANANA')
# =============================================================================
# Time Delta
# from datetime import datetime as dt

# fmt = '%a %d %b %Y %H:%M:%S %z'
# for i in range(int(input())):
    # print(int(abs((dt.strptime(input(), fmt) - 
                   # dt.strptime(input(), fmt)).total_seconds())))
# =============================================================================
# Word Order
# from collections import OrderedDict
# od = OrderedDict()
# n = int(input())
# for t in range(n):
    # k = input().strip()
    # if k in od:
        # od[k] += 1
    # else:
        # od[k] = 1

# print(len(od))
# print(' '.join(list(map(str, list(od.values())))))
# =============================================================================
# Piling Up!
# from collections import deque

# block = int(input())

# while block:
    # last_side = 0
    # kub = int(input())
    # od = deque(map(int, input().split()))
    # while len(od) > 0:
        # if last_side == 0:
            # if od[0] > od[-1]:
                # last_side = od[0]
            # else:
                # last_side = od[-1]

        # if last_side < od[-1] and last_side < od[-1]:
            # break

        # if od[-1] >= od[0]:
            # od.pop()
        # else:
            # od.popleft()

    # if len(od) == 0:
        # print('Yes')
    # else:
        # print('No')
    
    # block = block - 1
# =============================================================================
# Triangle Quest
# for i in range(1,int(input())):
    # print(i + sum(list(map(lambda c: pow(10,c)*i, range(1, i)))))
# =============================================================================
# ginortS
# row = input()
# ch_l = []
# ch_h = []
# num_o = []
# num_e = []
# for ch in row:
    # if ch.isalpha():
        # if ch.islower():
            # ch_l.append(ch)
        # else:
            # ch_h.append(ch)
    # elif ch.isdigit():
        # if int(ch) % 2 == 0:
            # num_e.append(ch)
        # else:
            # num_o.append(ch)

# ch_l.sort()
# ch_h.sort()
# num_o.sort()
# num_e.sort()
# print(''.join(ch_l + ch_h + num_o + num_e))
# =============================================================================
# Validating Credit Card Numbers
# import re

# pattern = r'^\d{16}$|^\d{4}-\d{4}-\d{4}-\d{4}$'
# pattern2 = r'^[4-6]'
# pattern3 = r'(?=(\d))\1{4,}'  #поиск подряд одинаковых цифр

# for _ in range(int(input())):
    # in_str = input()
    # if bool(re.search(pattern, in_str, re.I)) == False:
        # print('Invalid')
        # continue
    # if bool(re.search(pattern2, in_str, re.I)) == False:
        # print('Invalid')
        # continue
    # in_str = in_str.replace('-', '')
    # if bool(re.search(pattern3, in_str, re.I)) == True:
        # print('Invalid')
        # continue
    # print('Valid')

# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
