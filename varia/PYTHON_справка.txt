Типы переменных
    ЧИСЛА
        int
        float
        complex

        Методы int:
            bit_length() - количество бит, необходимых для представления числа в двоичном виде, без учёта знака и лидирующих нулей.
            conjugate()- возвращает ¯x - число, которое комплексно сопряжено с x
            denominator
            from_bytes(bytes, byteorder, *, signed=False) - возвращает число из данной строки байтов.
                >>> int.from_bytes(b'\xfc\x00', byteorder='big', signed=True)
                -1024
            imag
            numerator
            real
            to_bytes(length, byteorder, *, signed=False) - возвращает строку байтов, представляющих это число.
                (-1024).to_bytes(10, byteorder='big', signed=True)
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00'
                (1000).to_bytes((x.bit_length() // 8) + 1, byteorder='little')
                b'\xe8\x03'

            int([object], [основание системы счисления]) - преобразование к целому числу в десятичной системе счисления.
                По умолчанию система счисления десятичная, но можно задать любое основание от 2 до 36 включительно.
            bin(x) - преобразование целого числа в двоичную строку.
            hex(х) - преобразование целого числа в шестнадцатеричную строку.
            oct(х) - преобразование целого числа в восьмеричную строку.

        Методы float
            as_integer_ratio - представляет десятичную дробь в виде обычной — пары «числитель, знаменатель»:
                >>> (0.25).as_integer_ratio()
                (1, 4)
            conjugate
            fromhex(s) - float из шестнадцатеричной строки.
            hex() - переводит float в hex (шестнадцатеричную систему счисления).
            imag
            is_integer() возвращает True если дробная часть числа равна 0 и False если нет
            real

    СТРОКИ
        методы str:
            capitalize() вернет копию строки str с первым символом в верхнем регистре, а остальные символы будут в нижнем регистре.
            casefold() вернет строку, приведенную к нижнему регистру символов в результате свертывания регистра.
            center(width[, fillchar])позиционирует по центру строку str, дополняя её справа и слева до требуемой длины width
                указанным символом fillchar.
            count(sub[, start[, end]]) возвращает количество вхождений подстроки sub в строку str в диапазоне индексов [start, end],
                если они переданы в метод.
            encode(encoding="utf-8", errors="strict")  вернет закодированную версию строки str как объект байтов.
                Другими словами кодирует текстовую строку str в строку байтов, используя указанную кодировку encoding.
                encoding по умолчанию используется 'utf-8'
            endswith(suffix[, start[, end]])возвращает True, если строка str заканчивается указанным суффиксом suffix,
                в противном случае возвращает False.
            expandtabs(tabsize=8) возвращает копию строки str, в которой все символы табуляции \t заменяются одним
                или несколькими пробелами, в зависимости от текущего столбца и заданного размера табуляции tabsize.
            find(sub[, start[, end]]) возвращает индекс первого совпадения подстроки sub в строке str,
                где подстрока или символ sub находится в пределах среза str[start:end].
                Другими словами, находит и возвращает индекс первого совпадения подстроки в строке str.
            format(*args, **kwargs) выполняет операцию форматирования строки str. Возвращает копию строки,
                в которой каждое замещающее поле заменяется строковым значением соответствующего аргумента.
                'текст {0} текст {1} текст'.format(a, b)
                'текст {} текст {} текст'.format(a, b)
                'текст {1} текст {0} текст {1}'.format(a, b)
                'текст {one} текст {two} текст {two}'.format(one=a, two=b)
            format_map(mapping) работает аналогично str.format(**mapping), за исключением того,
                что mapping используется напрямую и не копируется в словарь dict.
                '{name} was born in country'.format_map(Default(name='Guido'))
            index(sub[, start[, end]]) возвращает индекс первого совпадения начала подстроки sub в строке str,
                где подстрока или символ sub находится в пределах среза str[start:end].
                x.index('раз', 0, 23)
            isalnum() возвращает True, если все символы в строке являются буквенно-цифровыми и есть хотя бы один символ,
                в противном случае False.
            isalpha() возвращает True, если все символы в строке str являются буквенными и есть хотя бы один символ
                (строка не пустая и не состоит из одного пробела), в противном случае False.
            isdecimal() возвращает True, если все символы в строке str являются десятичными и есть хотя бы один символ
                (строка является не пустой и не состоит из пробелов), в противном случае False.
            isdigit() возвращает True, если все символы в строке str являются цифрами и есть хотя бы один символ
                (строка является не пустой и не состоит из пробелов), в противном случае False.
            isidentifier() возвращает True, если строка str является допустимым идентификатором в соответствии
                с определением языка, в противном случае False.
            islower() возвращает True, если все символы в строке имеют нижний регистр (строчные), при этом строка
                не должна быть пустой, то есть должна иметь хотя бы один символ в нижнем регистре и не состоять из одних пробелов.
            isnumeric() возвращает True, если все символы в строке являются числовыми символами, и есть по крайней мере один числовой
                символ (строка является не пустой и не состоит из пробелов), False в противном случае.
            isprintable() возвращает True, если все символы в строке доступны для печати или строка пуста, в противном случае False.
            isspace() возвращает True, если в строке есть только пробелы и если есть хотя бы один пробел (строка не пуста ''),
                в противном случае False.
            istitle() возвращает True, если каждое слово в строке str начинается с заглавной буквы и в ней есть хотя бы один
                символ в верхнем регистре. Возвращает False в противном случае.
            isupper() возвращает True, если все символы в строке str прописные (имеют верхний регистр), при этом строка
                не должна быть пустой, то есть должна иметь хотя бы один символ в верхнем регистре и не состоять из одних пробелов.
            join() возвращает строку, которая является конкатенацией (объединением) всех элементов строк итерируемого объекта iterable.
                >>> x = ['возвращает',  'строку',  'которая', 'является', 'конкатенацией']
                >>> line =  ' '.join(x)
            ljust(width[, fillchar]) вернет новую строку с текстом str, выровненным по левому краю и шириной width.
            lower() вернет копию строки str, в которой все символы будут преобразованы в нижний регистр.
            lstrip([chars]) вернет копию строки str с удаленными символами chars в начале строки.
                Другими словами, обрежет строку str спереди на заданные символы chars.
                Аргумент chars - это строка, указывающая набор удаляемых символов.
                Если chars не задан или None, то по умолчанию метод str.lstrip() удаляет пробелы в начале строки.
            maketrans(x[, y[, z]]) создает и возвращает таблицу преобразования символов, используемую для метода str.translate().
            partition(sep) разбивает строку при первом появлении разделителя sep и вернет кортеж, содержащий часть строки str
                перед разделителем, сам разделитель sep и часть строки str после разделителя.
            replace(old, new[, count]) вернет копию строки, в которой все вхождения подстроки old заменены на подстроку new
                count число раз.
            rfind(sub[, start[, end]]) возвращает индекс последнего совпадения подстроки sub в строке str, где подстрока
                или символ sub находится в пределах среза str[start:end]. Другими словами, находит и возвращает индекс
                по которому обнаруживается конец указанной подстроки в исходной строке str.
            rindex(sub[, start[, end]]) возвращает индекс наибольший индекс конца подстроки sub в строке str,
                где подстрока или символ sub находится в пределах среза str[start:end]. Работает аналогично методу
                строки str.rfind(), за исключением того, что бросает исключение ValueError, если символ или подстрока sub
                не найдены в строке str.
            rjust(width[, fillchar]) вернет новую строку с текстом str, выровненным по правому краю и шириной width.
            rpartition(sep) разбивает строку при последнем появлении разделителя sep и вернет кортеж, содержащий часть
                строки str перед разделителем, сам разделитель sep и часть строки str после разделителя.
            rsplit(sep=None, maxsplit=-1) возвращает список подстрок (слов), используя sep в качестве разделителя строки str.
                Метод str.rsplit() деление строки начинает с права.
            rstrip([chars]) вернет копию строки str с удаленными символами chars в конце строки. Другими словами,
                обрежет строку str сзади на заданные символы chars. Аргумент chars - это строка, указывающая набор
                удаляемых символов.
            split(sep=None, maxsplit=-1)  возвращает список слов (подстрок) в строке, используя sep в качестве разделителя
                строки str. Если задан maxsplit, то выполняется не более maxsplit разбиений, таким образом, список будет
                иметь не более maxsplit+1 элементов. Если maxsplit не указан или равен -1, то делаются все возможные
                разделения строки str.
            splitlines([keepends]) возвращает список строк, текста str, разделенного по универсальным разрывам строк.
                Разрывы (разделители) строк не включаются в результирующий список, если не задано значение keepends=True.
            startswith(prefix[, start[, end]]) возвращает True, если строка str начинается указанным префиксом prefix,
                в противном случае возвращает False.
            strip([chars]) вернет копию строки str с удаленными начальными и конечными символами chars. Другими словами,
                обрежет строку str с обоих концов. Аргумент chars - это строка, указывающая набор удаляемых символов.
                Если аргумент chars не задан или None, то по умолчанию удалит пробелы с обоих концов строки.
            swapcase() возвращает копию строки str с прописными символами, преобразованными в строчные и наоборот.
                Другими словами метод меняет регистр символов в строке str.
            title() возвращает копию строки str, в которой у каждого слова в строке, первый символ имеет верхний регистр,
                а остальные символы слова переводятся в нижний регистр. Другими словами, метод вернет копию строки,
                в которой все слова начинаются с заглавной буквы.
            translate(table) возвращает копию строки, в которой каждый символ был сопоставлен и преобразован согласно
                карте перевода символов table.
            upper() вернет копию строки str с символами, преобразованными в верхний регистр.
            zfill(width) вернет копию строки, у которой начало строки будет заполнено цифрой ASCII 0, до указанной длины width.

    СПИСКИ []
        методы list:
            append(x) Операция позволяет добавить в конец последовательности новый объект x.
            clear() производит удаление всех элементов из последовательности.
            copy() Операция позволяет создавать мелкую копию последовательности. (копия ссылок)
            count(x) это встроенный метод списка, который позволяет подсчитывать вхождения
                определенного элемента x в последовательности.
            extend(iterable) Операция позволяет расширить список содержимым любой последовательности,
                которая поддерживает итерацию.
            index('x') Он принимает элемент 'x' в качестве аргумента и возвращает индекс.
                Если нет этого элемента в списке генерируется исключение ValueError.
            insert(i, x) вставляет объект x в последовательность sequence по индексу i.
                Если значение индекса i находится за пределами длины последовательности, то объект x вставляется в конец последовательности.
            pop(i) Метод позволяет получить элемент по индексу удаляя его из последовательности.
            remove(x) Метод производит удаление первого элемента, значение которого равно x из последовательности.
                Вызывает ValueError, когда объект x не найден в последовательности.
            reverse() Операция позволяет развернуть элементы последовательности. Метод изменяет последовательность
                не копируя для экономии памяти. То есть разворачивает саму последовательность, а не ее копию.
            sort(key = …, reverse = ...) Когда метод sort() вызывается без аргументов, по умолчанию он сортируется в порядке возрастания.
                У него нет возвращаемого значения. Обратите внимание, что это не связано со встроенной функцией sorted().
                Метод sort изменяет старый список, тогда как sorted() создает новую отсортированную последовательность.

    КОРТЕЖИ ()
        методы tuple:
            count(x) позволяет узнать сколько раз указанный элемент x появился в последовательности.
            index('x') Он принимает элемент 'x' в качестве аргумента и возвращает индекс.

    СЛОВАРИ {}
        методы dict:
            clear() производит удаление всех элементов из словаря.
            copy() Операция позволяет создавать мелкую копию последовательности. (копия ссылок)
            fromkeys(iterable[, value]) создает новый словарь с ключами из последовательности iterable и значениями, установленными в value.
            get(key[, default]) возвращает значение для ключа key, если ключ находится в словаре, если ключ отсутствует то вернет значение default.
            items() возвращает новый список-представление dict_items пар элементов словаря dict, такой как (key, value)
                Другими словами возвращает список кортежей вида (key, value), состоящий из элементов словаря.
            keys() возвращает новый список-представление всех ключей dict_keys, содержащихся в словаре.
            pop(key[, default]) вернет значение ключа key, а также удалит его из словаря dict.
                Если ключ не найден, то вернет значение по умолчанию default.
            popitem() удалит и вернет двойной кортеж (key, value) из словаря dict. Пары возвращаются с конца словаря,
                в порядке LIFO (последним пришёл - первым ушёл).
            setdefault(key[, default]) вернет значение словаря dict, соответствующее ключу key.
                Если указанный ключ key отсутствует, вставит его в словарь dict со значением default и вернет значение default.
                Если значение по умолчанию default не установлено и ключ отсутствует, метод вставит ключ в словарь со значением None,
                при этом никакое значение не возвращается.
            update([other]) обновляет/дополняет словарь dict с помощью пар ключ-значение из other, перезаписывая существующие ключи новыми
                значениями из other. Если ключ в словаре отсутствует, то он добавляется. Метод ничего не возвращает.
            values() возвращает новый список-представление всех значений dict_values, содержащихся в словаре dict.

    МНОЖЕСТВА {,} set() - изменяемое множество orig_sets = {0, 1, 3, 5, 6, 7}
        методы set:
            add(elem) добавляет элемент elem в множество set. Множества не поддерживают сортировку, по этому элемент elem добавляется в
                произвольное место, не обязательно в конец.
            clear() удаляет все элементы из множества set.
            copy() вернет мелкую копию множества.
            difference(*others) или sets1 - sets2 - ... позволяет получить элементы множества, которых нет в одной или более
                последовательности поддерживающих итерирование. Метод возвращает новое множество с уникальными элементами множества
                sets, которых нет во всех итерируемых объектов *other (* - произвольное число позиционных аргументов).
                При выполнении операции вычитания, дубликаты игнорируются.
            difference_update(*others) или set -= set1 | ... позволяет удалить элементы из множества set, которые присутствуют во всех
                сравниваемых объектах. Метод возвращает измененное множество set с уникальными элементами, которых нет в одном
                или более итерируемом объекте *other.
            discard(elem) удаляет элемент elem из множества set, если его значение присутствует в множестве.
                НЕ вызывает исключений, если значение elem отсутствует в множествe.
            intersection(*others) или sets1 & sets2 & ... позволяет найти пересечение множества с одной или более последовательностями
                поддерживающих итерирование. Метод возвращает новое множество с элементами, общими для множества sets и всех итерируемых
                объектов *other (* - произвольное число позиционных аргументов). При выполнении операции пересечения, дубликаты игнорируются.
            intersection_update(*others) или set &= set1 & ... позволяет сохранить в множестве set только те элементы, которые присутствуют
                одновременно во всех объектах, участвующих в операции. Метод возвращает обновленное множество set с элементами, которые
                являются общими для множества set и всех итерируемых объектов *other. При выполнении данной операции, дубликаты игнорируются.
            isdisjoint(other) позволяет проверить множество sets на отсутствие общих элементов с последовательностью other.
                Метод возвращает True, если множество sets не имеет общих элементов с итерируемым объектом other, если имеются общие
                элементы то вернет False.
            issubset(other) или sets1 <= sets2 позволяет проверить находится ли каждый элемент множества sets в последовательности other.
                Метод возвращает True, если множество sets является подмножеством итерируемого объекта other, если нет, то вернет False.
            issuperset(other) или sets1 >= sets2 позволяет проверить находится ли каждый элемент последовательности other в множестве sets.
                Метод возвращает True, если множество sets является надмножеством итерируемого объекта other, если нет, то вернет False.
            pop() вернет произвольный элемент из множества set, а затем удалит его.
            remove(elem) удаляет элемент из множества set с значением elem.
            symmetric_difference(other) или sets1 ^ sets2 позволяет исключить из результата общие элементы для множества и последовательности,
                операцию еще называют симметричной разницей. Метод возвращает новое множество, в котором нет одинаковых элементов,
                встречающихся одновременно в множестве setsи итерируемом объекте other. При выполнении операции симметричного вычитания,
                дубликаты игнорируются.
            symmetric_difference_update(other) или set ^= set1 позволяет изменить множество set так, что оно будет содержать уникальные
                элементы, встречающиеся в самом множестве и последовательности other. Метод возвращает обновленное множество set
                с элементами, которые являются уникальными для обоих объектов. При выполнении данной операции, дубликаты игнорируются.
            union(*others) позволяет объединить множество с одной или более последовательностями поддерживающих итерирование.
                Метод возвращает новое множество с элементами из множества sets и элементами вставленными из всех итерируемых
                объектов *other (* - произвольное число позиционных аргументов). При выполнении операции объединения, дубликаты игнорируются.
            update(*others) или set1 |= set2 | ... позволяет добавить в множество set, элементы из одной или более последовательности
                поддерживающих итерирование. Метод возвращает обновленное множество set с добавленными элементами из всех итерируемых
                объектов *other (* - произвольное число позиционных аргументов). При выполнении операции добавления, дубликаты элементов
                последовательности игнорируются.
        методы frozenset: Неизменяемое множество orig_fset = frozenset({0, 2, 3, 4, 8, 9})
            copy() вернет мелкую копию множества.
            difference(*others) или sets1 - sets2 - ... позволяет получить элементы множества, которых нет в одной или более
                последовательности поддерживающих итерирование. Метод возвращает новое множество с уникальными элементами множества
                sets, которых нет во всех итерируемых объектов *other (* - произвольное число позиционных аргументов).
                При выполнении операции вычитания, дубликаты игнорируются.
            intersection(*others) или sets1 & sets2 & ... позволяет найти пересечение множества с одной или более последовательностями
                поддерживающих итерирование. Метод возвращает новое множество с элементами, общими для множества sets и всех итерируемых
                объектов *other (* - произвольное число позиционных аргументов). При выполнении операции пересечения, дубликаты игнорируются.
            isdisjoint(other) позволяет проверить множество sets на отсутствие общих элементов с последовательностью other.
                Метод возвращает True, если множество sets не имеет общих элементов с итерируемым объектом other, если имеются общие
                элементы то вернет False.
            issubset(other) или sets1 <= sets2 позволяет проверить находится ли каждый элемент множества sets в последовательности other.
                Метод возвращает True, если множество sets является подмножеством итерируемого объекта other, если нет, то вернет False.
            issuperset(other) или sets1 >= sets2 позволяет проверить находится ли каждый элемент последовательности other в множестве sets.
                Метод возвращает True, если множество sets является надмножеством итерируемого объекта other, если нет, то вернет False.
            symmetric_difference(other) или sets1 ^ sets2 позволяет исключить из результата общие элементы для множества и последовательности,
                операцию еще называют симметричной разницей. Метод возвращает новое множество, в котором нет одинаковых элементов,
                встречающихся одновременно в множестве setsи итерируемом объекте other. При выполнении операции симметричного вычитания,
                дубликаты игнорируются.
            union(*others) позволяет объединить множество с одной или более последовательностями поддерживающих итерирование.
                Метод возвращает новое множество с элементами из множества sets и элементами вставленными из всех итерируемых
                объектов *other (* - произвольное число позиционных аргументов). При выполнении операции объединения, дубликаты игнорируются.
        len(sets) - определение количество элементов



https://docs-python.ru/tutorial/operatsii-tekstovymi-strokami-str-python/metod-str-isnumeric/

https://tproger.ru/problems/python-3-exercises-for-beginners-geekbrains/

https://docs-python.ru/search/

# хорошая статья про BeautifulSoup: https://habr.com/ru/company/ods/blog/346632/
# obj = soup.find(lambda tag: tag.name == 'a' and tag.get('class') == ['photo'])

















