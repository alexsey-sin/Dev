Проект YaMDb

Тимлид вашей команды склонирует репозиторий api_yamdb (он доступен на Гитхабе),
и в качестве коллабораторов (соразработчиков) подключит остальных участников
команды. Соразработчики склонируют этот репозиторий себе, и каждый займётся
своей частью проекта, работая в собственной ветке Git.

Отправлять проект на проверку будет тимлид. После выполнения задания славу
разделят все разработчики вашей команды.

Если ваш лид отправил проект на проверку, и проект был принят — остальным
участникам команды надо скопировать проект и отправить архив ревьюерам со
своего аккаунта. Выполнение будет засчитано автоматом.

Проект YaMDb

Проект YaMDb собирает отзывы (Review) пользователей на произведения (Titles).
Произведения делятся на категории: «Книги», «Фильмы», «Музыка». Список
категорий (Category) может быть расширен (например, можно добавить категорию
«Изобразительное искусство» или «Ювелирка»).

Сами произведения в YaMDb не хранятся, здесь нельзя посмотреть фильм или
послушать музыку.

В каждой категории есть произведения: книги, фильмы или музыка. Например,
в категории «Книги» могут быть произведения «Винни Пух и все-все-все» и
«Марсианские хроники», а в категории «Музыка» — песня «Давеча» группы
«Насекомые» и вторая сюита Баха. Произведению может быть присвоен жанр
(Genre) из списка предустановленных (например, «Сказка», «Рок» или «Артхаус»).
Новые жанры может создавать только администратор.

Благодарные или возмущённые читатели оставляют к произведениям текстовые
отзывы (Review) и выставляют произведению рейтинг (оценку в диапазоне от
одного до десяти). Из множества оценок высчитывается средняя оценка
произведения.

Техническое описание проекта YaMDb

Вам доступен репозиторий api_yamdb, в нём сохранён пустой Django-проект.
К проекту по адресу /redoc подключена документация API YaMDb. В ней описаны
шаблоны запросов к API и структура ожидаемых ответов. Для каждого запроса
указаны уровни прав доступа: пользовательские роли, которым разрешён запрос.

Ваша задача — написать проект и API так, чтобы они полностью соответствовали
документации.

Пользовательские роли

    Аноним — может просматривать описания произведений, читать отзывы и
		комментарии.
    Аутентифицированный пользователь (user)— может читать всё, как и Аноним,
		дополнительно может публиковать отзывы и ставить рейтинг
		произведениям (фильмам/книгам/песенкам), может комментировать
		чужие отзывы и ставить им оценки; может редактировать и удалять
		свои отзывы и комментарии.
    Модератор (moderator) — те же права, что и у Аутентифицированного
		пользователя плюс право удалять и редактировать любые отзывы
		и комментарии.
    Администратор (admin) — полные права на управление проектом и всем
		его содержимым. Может создавать и удалять произведения, категории
		и жанры. Может назначать роли пользователям.
    Администратор Django — те же права, что и у роли Администратор.

Алгоритм регистрации пользователей

    Пользователь отправляет POST-запрос с параметром email на /api/v1/auth/email/.
    YaMDB отправляет письмо с кодом подтверждения (confirmation_code)
		на адрес email .
    Пользователь отправляет POST-запрос с параметрами email и
		confirmation_code на /api/v1/auth/token/, в ответе на запрос
		ему приходит token (JWT-токен).

Эти операции выполняются один раз, при регистрации пользователя.
В результате пользователь получает токен и может работать с API,
отправляя этот токен с каждым запросом.

После регистрации и получения токена пользователь может отправить
PATCH-запрос на /api/v1/users/me/ и заполнить поля в своём профайле
(описание полей — в документации).

Если пользователя создаёт администратор
(например, через POST-запрос api/v1/users/...) — письмо с кодом
отправлять не нужно.

Автоматические тесты платформы не будут проверять отправку писем.

Ресурсы API YaMDb

    Ресурс AUTH: аутентификация.
    Ресурс USERS: пользователи.
    Ресурс TITLES: произведения, к которым пишут отзывы (определённый
		фильм, книга или песенка).
    Ресурс CATEGORIES: категории (типы) произведений
		(«Фильмы», «Книги», «Музыка»).
    Ресурс GENRES: жанры произведений. Одно произведение может быть
		привязано к нескольким жанрам.
    Ресурс REVIEWS: отзывы на произведения. Отзыв привязан к определённому
		произведению.
    Ресурс COMMENTS: комментарии к отзывам. Комментарий привязан к
		определённому отзыву.

Каждый ресурс описан в документации: указаны эндпойнты (адреса, по
которым можно сделать запрос), разрешённые типы запросов, права доступа
и дополнительные параметры, если это необходимо.

Связанные данные и каскадное удаление

При удалении объекта пользователя User должны удаляться все отзывы и
комментарии этого пользователя (вместе с оценками-рейтингами).

При удалении объекта произведения Title должны удаляться все отзывы к
этому произведению и комментарии к ним.

При удалении объекта категории Category не удалять связанные с этой
категорией произведения (Title).

При удалении объекта жанра Genre не удалять связанные с этим жанром
произведения (Title).

При удалении объекта отзыва Review должны быть удалены все комментарии
к этому отзыву.

База данных

В репозитории с заданием в директории /data подготовлены несколько файлов
.csv с контентом для Users, Titles, Categories, Genres, Review и Comments.
Тестировать пустой проект будет неудобно, а наполнять его руками — долго.

После того, как вы подготовите модели — заполните базу данных контентом
из приложенных .csv. Делать это не обязательно, однако заполнение базы
готовыми данными упростит и ускорит работу: для проверки кода вам всё равно
понадобятся тестовый контент.

«Закинь данные из CSV в БД» — достаточно распространённая задача, такой опыт 
обязательно пригодится вам в дальнейшей работе. И ещё очень повезёт, если с
данными всё будет в порядке: например, в таблице могут быть пропущены какие-то
обязательные значения; эти данные менеджер у себя в эксельке набивал, откуда
ему знать.

Залить в базу данные из файлов .csv можно несколькими способами:

    импортировать данные средствами SQLite, нужную команду ищите здесь;
		(https://sqlite.com/matrix/cli.html)
    написать скрипт, применив библиотеку csv;
    подключить специальную библиотеку для импорта.

Выбирайте любой способ.

Распределение задач в команде

Мы предлагаем распределить работу между участниками таким образом:

Первый разработчик пишет всю часть, касающуюся управления пользователями
(Auth и Users): систему регистрации и аутентификации, права доступа, работу
с токеном, систему подтверждения e-mail, поля.

Второй разработчик пишет категории (Categories), жанры (Genres) и произведения
(Titles): модели, view и эндпойнты для них.

Третий разработчик занимается отзывами (Review) и комментариями (Comments):
описывает модели и view, настраивает эндпойнты, определяет права доступа для
запросов. Рейтинги произведений тоже достаются третьему разработчику.

Это только наши рекомендации, вы можете распределить работу как-то иначе.

===============================================================================
Проект в папке api_yamdb

===============================================================================

