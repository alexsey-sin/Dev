Ошибки

Изучение новой области знаний всегда начинается с проб и ошибок
(взять, хотя бы, шоппинг или искусство кулинарии). Разработка — не исключение:
во время обучения вы постоянно будете делать ошибки в коде. И на протяжении
всей своей карьеры разработчика вы тоже будете делать ошибки. Написать код,
а затем отловить и исправить ошибки — это стандартный путь программиста.
Это норма!

Python изо всех сил постарается помочь вам найти ошибку, предоставляя всю
возможную информацию о проблеме: «Я сломался, ошибка на строке 8, там забыли
закрыть скобку!».

Сюда можно картинку с больным (забинтованным?) питоном. И жалуется на жизнь
по-английски

Разговаривает Python по-английски, но понять его несложно, даже если у вас
нет глубоких познаний в языке. Читайте всё, что он пишет: это поможет
самостоятельно разобраться с ошибкой. Сообщения об ошибках называются
Traceback («трейсбек»).

Скорее всего, вы уже успели наделать ошибок в предыдущих заданиях. В этом уроке
мы будем делать их осознанно. 

Попробуем выполнить такую программу:

	one_hundred = 100
	print(one_hunred) 

	Traceback (most recent call last):
		  File "main.py", line 2, in <module>
			print(one_hunred)
		NameError: name 'one_hunred' is not defined 

Во второй строке допущена опечатка: в имени переменной пропущена буква "d".
Python споткнулся о неизвестное имя переменной и выдал сообщение об ошибке,
с такими подробностями:

    в какой строчке кода обнаружена ошибка: line 2;
    тип ошибки: NameError;
    из-за чего произошла ошибка: name 'one_hunred' is not defined
		(никаких сущностей с именем one_hunred ещё не объявлялось).

Чтобы программа заработала, поправим опечатку:

	one_hundred = 100
	print(one_hundred) 

Ошибки — это нормально. С ними сталкиваются все разработчики. Умение находить
и исправлять ошибки — это ценный навык.

Разберём ещё несколько примеров.

При сложении забыли написать одно слагаемое. Получаем синтаксическую ошибку,
сообщение SyntaxError:

	print(3 + ) 

	File "main.py", line 1
		   print(3 + )
					 ^
		SyntaxError: invalid syntax 

Сообщение invalid syntax переводится как «недопустимый синтаксис». Другую ошибку
SyntaxError можно получить, если забыть скобку или кавычку:

	print(3 + 5 

	File "main.py", line 2
		   
					  ^
		SyntaxError: unexpected EOF while parsing 

EOF – сокращение для end of file, а всё сообщение "unexpected EOF while parsing"
переводится как «неожиданный конец файла во время разбора кода программы».
Python увидел начало вызова функции, но внезапно код программы закончился.

print('Привет!) 

File "main.py", line 1
       print('Привет!)
                      ^
    SyntaxError: EOL while scanning string literal 

EOL – сокращение для end of line, а всё сообщение "EOL while scanning string literal" переводится как «конец строчки во время обработки текста». Python увидел открывающую кавычку, но строчка закончилась, а закрывающей кавычки не было.

Право на ошибку

Большýю часть времени разработчик тратит на поиск и исправление ошибок.
Их будет много, и важно относиться к ним как к задаче, а не как к проблеме
или беде. Если код сходу не заработал — это нормально, так и должно быть.

Пишите код без опаски. В нём обязательно будут баги, но вы обязательно их
отловите. Если не получится — мы поможем.

===============================================================================
Тренажер

Задача:

С комментариями в коде вы знакомы: символ решётки # скрывает от Python всё,
что написано в строке. Обычно комментирование в коде применяют для того,
чтобы оставить какие-то заметки, поясняющие работу кода.

Но есть и иное применение комментариев.

Если символом комментария # скрыть часть кода — Python перестанет видеть этот
код и не станет его выполнять.

Если закомментировать код с ошибкой — Python не увидит эту ошибку и перейдёт
к выполнению следующих строк.

В этом задании вы можете поэкспериментировать с разными ошибками и посмотреть
на сообщения о них. По очереди закомментируйте строчки с ошибками символом #.

Cообщения об ошибках выдаёт не наш тренажёр, а сам Python. После того,
как поэкспериментируете с ошибками — удалите весь код или исправьте ошибки
(тренажёр не пропускает код с ошибками) и нажмите кнопку «Проверить».
Если перед этим нажмёте на подсказку — не пожалеете: там кое-что любопытное
насчёт ошибок в Python.

Подсказка:

Если в коде несколько строк, ошибка с незакрытой скобкой показывается не
на той строчке, где вы забыли закрыть скобку, а на следующей — попробуйте!
Дело в том, что Python разрешает ставить открывающую и закрывающую скобки на
разных строчках. Поэтому он терпеливо дожидается, пока код ну уж совсем утратит
смысл, и только тогда выдаёт ошибку.

******************************************
	one_hundred = 100
	print(one_hundred)

	#print(3 + )

	#print(3 + 5

	#print('Привет!)
******************************************
===============================================================================
