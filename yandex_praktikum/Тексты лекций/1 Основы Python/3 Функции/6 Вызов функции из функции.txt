Вызов функции из функции

Функцию можно вызвать не только из основного кода, но и из другой функции. 

	# это первая функция, она только возвращает значение
	# выражение \n означает перевод строки
	def Jack():
		return 'в доме, который построил Джек.\n'


	# это вторая функция, она вызывает первую
	# и возвращает свою строку вместе с результатом функции Jack()
	def wheat():
		return 'которая в тёмном чулане хранится\n' + Jack()


	# а это третья функция, которая вызывает вторую,
	# которая вызывает первую
	def bird():
		return 'которая часто ворует пшеницу,\n' + wheat()


	print('Вот дом, который построил Джек.\n')
	print('А это пшеница, ' + wheat())
	print('А это весёлая птица-синица, ' + bird())

	Вот дом, который построил Джек.
		
	А это пшеница, которая в тёмном чулане хранится
	в доме, который построил Джек.
		
	А это весёлая птица-синица, которая часто ворует пшеницу,
	которая в тёмном чулане хранится
	в доме, который построил Джек.

Хорошая привычка — выделять вычисления и вывод в отдельные функции,
чтобы печать результатов не была разбросана по всему коду.

	# здесь вычисления периметра и площади прямоугольника
	def calc_perimeter(side_a, side_b):
		return (side_a + side_b) * 2


	def calc_square(side_a, side_b):
		return side_a * side_b


	# здесь подготовка результата
	def show_info(side_a, side_b):
		p = calc_perimeter(side_a, side_b)
		s = calc_square(side_a, side_b)
		text = 'Периметр равен ' + str(p) + ' м., '
		text += 'а площадь - ' + str(s) + ' кв.м.'
		return text


	# здесь все вызовы print()
	def runner():
		print(show_info(8, 10))
		print(show_info(3, 4))


	runner()

	Периметр равен 36 м., а площадь - 80 кв.м.
	Периметр равен 14 м., а площадь - 12 кв.м.

Если бы мы ошиблись и забыли вернуть строку text из функции show_info(),
то вывод получился бы странный:

	# здесь подготовка результата
	def show_info(side_a, side_b):
		p = calc_perimeter(side_a, side_b)
		s = calc_square(side_a, side_b)
		text = 'Периметр равен ' + str(p) + ' м., '
		text += 'а площадь - ' + str(s) + ' кв.м.'


	# здесь все вызовы print()
	def runner():
		print(show_info(8, 10))
		print(show_info(3, 4))

	None
	None 

Что такое None здесь?

Это специальное значение в Python, и оно обозначает... ничего
(англ. none, «ничто»). Если значение какой-нибудь переменной равно None,
обычно это значит, что она не определена, не имеет никакого значения.

Функция runner() печатает результаты вызовов функции show_info(). Так как в ней
нет return, то она ничего не возвращает, и print() печатает это самое ничего.

===============================================================================
Тренажер

Задача:

Измените код Анфисы. Оставьте вывод на экран, т.е. вызовы функции print(),
только в одном месте — в основном теле программы. Эти вызовы уже написаны
в предварительном коде задания.

Все прошлые выводы на экран — в функциях show_count_friends() и process_query()
— замените на возвращения результатов из функции оператором return.

Подсказка:

Не забудьте вернуть результат выполнения функции show_count_friends()
из process_query(), чтобы первому вызову print() было что печатать.

******************************************
	FRIENDS = ['Серёга', 'Соня', 'Дима', 'Алина', 'Егор']


	def show_count_friends(count_friends):
		if count_friends == 1:
			text = 'У тебя 1 друг'
		elif 2 <= count_friends <= 4:
			text = 'У тебя ' + str(count_friends) + ' друга'
		elif count_friends >= 5:
			text = 'У тебя ' + str(count_friends) + ' друзей'
		else:
			text = ''
		return text

	def process_query(query):
		if query == 'Сколько у меня друзей?':
			count = len(FRIENDS)
			text = show_count_friends(count)
		elif query == 'Кто все мои друзья?':
			friends_string = ', '.join(FRIENDS)
			text = 'Твои друзья: ' + friends_string
		else:
			text = '<неизвестный запрос>'
		return text

	# Внимание! Это те самые вызовы, которые не надо трогать
	print(process_query('Сколько у меня друзей?'))
	print(process_query('Кто все мои друзья?'))
	print(process_query('Как меня зовут?'))
******************************************
===============================================================================
