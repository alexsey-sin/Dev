Функции

Функция — блок кода для выполнения определённой задачи, который можно использовать
многократно в разных частях программы. Существует множество встроенных в Python
готовых функций. Некоторые вы уже применяли ранее: print(), str(), int(), float(),
len().

Но можно создавать собственные функции.

Всё начинается с объявления функции, со строки, которая означает «здесь мы создаём
новую функцию».

Функцию объявляют ключевым словом def, затем указывают имя функции
(имя придумывает разработчик), после имени — параметры функции в круглых скобках.
Завершается объявление функции двоеточием. Со следующей строки, с отступом
в 4 пробела от начала, записывают тело функции — код, который она выполняет. 

	# Объявление функции
	def hello(name):
		print(name + ', приветствую тебя!')

Строгое правило четырёх отступов в блоке кода действует и для функций: только
по отступам Python понимает, где заканчивается тело функции. Не будет отступов
— функция не заработает.

После того, как функция создана — к ней можно обратиться из любого места кода,
и функция выполнит те действия, которые в ней описаны.

Обращение к функции называется вызов функции. Функция вызывается по имени,
при вызове ей передают аргументы, с которыми она должна что-то сделать.
Пока функция не вызвана — она не выполняется: она просто лежит и ждёт своего часа.

	# Объявление функции
	def hello(name):
		print(name + ', приветствую тебя!')

	# Вызов функции hello() с аргументом 'Стас Басов'
	hello('Стас Басов')

Даже если вас зовут не Стас — протестируйте этот код в тренажёре, он всё равно
сработает.

Аргумент функции — это переменная, которая используется внутри функции.
Значение этой переменной присваивается при вызове функции. Именно это произошло
со Стасом (вернее, со строкой 'Стас Басов').

Первая функция Анфисы

Код, в котором Анфиса училась вести себя учтиво, можно упаковать в функцию.
Раньше время генерировалось случайным выбором числа от 0 до 23, а теперь функция
будет получать время в аргументе при вызове:

	# Код функции say_hello()
	def say_hello(current_hour):
		if current_hour <= 5 or current_hour >= 23:
			print('Доброй ночи!')
		elif current_hour >= 6 and current_hour <= 11:
			print('Доброе утро!')
		elif current_hour >= 12 and current_hour <= 17:
			print('Добрый день!')
		elif current_hour >= 18 and current_hour <= 22:
			print('Добрый вечер!')

	# Код вне функции: он без отступов
	say_hello(4)  # Вызов функции say_hello() с аргументом 4
	print('------')
	say_hello(10)  # Вызов функции с аргументом 10
	print('------')
	say_hello(15)  # Ещё один вызов функции
	print('------')
	say_hello(20)  # И ещё один вызов

Будет напечатано:

	Доброй ночи!
	------
	Доброе утро!
	------
	Добрый день!
	------
	Добрый вечер!

Функция с именем say_hello готова и работает. Теперь из любого места в коде
можно вызвать функцию say_hello(), и после этого на экран будет выводиться
приветствие с текстом, зависящим от аргумента current_hour.

Для тех, кому нравится всё проверять: раздел "Defining functions"
в официальной документации языка Python 3.7.3.
(https://docs.python.org/3/tutorial/controlflow.html#defining-functions)

Чтобы вам было удобнее решать задачи - мы подготовили шпаргалку(py03.pdf).
Откройте ее в соседнем окошке или распечатайте и держите под рукой. 

===============================================================================
Тренажер

Задача 1/2:

На основе заготовленного кода напишите функцию print_friends_count() для вывода
количества друзей. Аргументом сделайте friends_count.

Вызовите эту функцию не менее трёх раз. Она должна корректно склонять фразу о
количестве друзей при значении от 0 до 99.

Подсказка:

Функция объявляется ключевым словом def:

	def print_friends_count(friends_count): 

Помните, что тело функции должно быть смещено на 4 пробела правее слова def.
Весь прекод должен выполняться в теле функции:

	def print_friends_count(friends_count):
		remainder = friends_count % 10
		...
		else:
			print('У тебя', friends_count, 'друга') 

******************************************
# Объявите функцию здесь
# Весь код должен оказаться внутри функции
def print_friends_count(friends_count):
    remainder = friends_count % 10
    if friends_count == 0:
        print('У тебя нет друзей')
    elif remainder == 0 or remainder >= 5 or (10 <= friends_count <= 19):
        print('У тебя', friends_count, 'друзей')
    elif remainder == 1:
        print('У тебя', friends_count, 'друг')
    else:
        print('У тебя', friends_count, 'друга')

print_friends_count(2)
print_friends_count(25)
print_friends_count(77)
******************************************

Задача 2/2:

Напишите цикл, в котором функция print_friends_count() вызывается c аргументами
от 1 до 10.

Код самой функции не изменяйте, а цикл пишите после функции, вне её: перед
объявлением цикла не должно быть отступов.

Подсказка:

    Переберите в цикле значения от 1 до 10: for friends_count in range(1, 11);
		перед этой строкой не должно быть отступов, иначе получится, что она
		внутри функции.
    В теле цикла вызывайте функцию print_friends_count() с аргументом
		friends_count: эта переменная будет поочерёдно принимать значения от 1 до 10.

******************************************
# Объявите функцию здесь
# Весь код должен оказаться внутри функции
def print_friends_count(friends_count):
    remainder = friends_count % 10
    if friends_count == 0:
        print('У тебя нет друзей')
    elif remainder == 0 or remainder >= 5 or (10 <= friends_count <= 19):
        print('У тебя', friends_count, 'друзей')
    elif remainder == 1:
        print('У тебя', friends_count, 'друг')
    else:
        print('У тебя', friends_count, 'друга')

for friends_count in range(1, 11):
    print_friends_count(friends_count)
******************************************
===============================================================================
