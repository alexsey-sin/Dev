Подробнее о форматировании

В f-строки можно подставлять не только переменные, но и результаты вычислений.
Например, арифметические операции:

	one_hundred = 100
	five_hundred = 500
	print(f'{one_hundred} + {five_hundred} = {one_hundred + five_hundred}')
		
	one_hundred = 'сто'
	five_hundred = 'пятьсот'
	print(f'{one_hundred} + {five_hundred} = {one_hundred + five_hundred}') 

	100 + 500 = 600
	сто + пятьсот = стопятьсот 

И обращение к элементам списка:

	russian_alphabet = ['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т',
						'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я']
		
	print(f'«{russian_alphabet[-1]}» - последняя буква в алфавите.') 

	«я» - последняя буква в алфавите. 

А также к элементам словаря по ключу:

	favorite_songs = {
		'Тополиный пух': 'Иванушки international',
		'Город золотой': 'Аквариум',
		'Звезда по имени Солнце': 'Кино'
	}

	song = 'Город золотой'

	print(f'«{song}» - одна из известных пеcен группы «{favorite_songs[song]}».')

	«Город золотой» - одна из известных пеcен группы «Аквариум».

Хоть Python и позволяет вставлять очень сложные выражения внутрь f-строк,
не злоупотребляйте этой возможностью. Иначе получится перегруженный код,
в котором будет сложно разобраться. Сравните два эквивалентных примера:

	print(f'Корни уравнения равны {(-b + (b**2 - 4*a*c)**(1/2)) / (2*a)} и {(-b - (b**2 - 4*a*c)**(1/2)) / (2*a)}')

и

	d = b**2 - 4*a*c
	x1 = (-b + d**(1/2)) / (2*a)
	x2 = (-b - d**(1/2)) / (2*a)
	print(f'Корни уравнения равны {x1} и {x2}')

Второй намного понятнее, хотя строк стало в четыре раза больше. Не так ли?

Лучше придерживаться общего правила: f-строки используются только для
форматирования вывода, а вычислять все выражения надо вне их. И вообще,
не стоит экономить на количестве строчек кода, принося в жертву его читаемость.

===============================================================================
Тренажер

Задача 1/3:

Научите Анфису сообщать время в формате ЧЧ:ММ:СС (часы, минуты, секунды).
Например На часах 19:28:06.

Подсказка:

Внутрь f-строки вставьте значения трёх переменных, разделённых двоеточием :

******************************************
	def print_time(hour, minute, second):
		print(f'На часах {hour}:{minute}:{second}')  # аргумент должен содержать f-строку

		
	print_time('19', '28', '06')
******************************************

Задача 2/3:

Анфисе передали список listened с хронометражем прослушанных песен в секундах.
Выведите на экран суммарную статистику:

'Вы прослушали N песен.'

Где:

N — длина списка listened.

Подсказка:

Внутрь f-строки вставьте значение длины списка.

******************************************
	def calc_stat(listened):  # от англ. calculate statistics, посчитать статистику
		count = len(listened)
		return f'Вы прослушали {count} песен.'
			
	print(calc_stat([193, 148, 210, 144, 174, 159, 163, 189, 230, 204]))
******************************************

Задача 3/3:

Анфисе передали список listened (англ. listen, «слушать») с хронометражем
прослушанных песен в секундах. Выведите на экран суммарную статистику:

'Вы прослушали N песен, общей продолжительностью M минут и S секунд.'

Где:
N — длина списка listened;
M — количество целых минут общей продолжительности прослушанного;
S — остаток от целых минут.

Подсказка:

    Минуты можно получить, разделив суммарное время на 60 оператором /,
	и взяв целую часть от частного. Или воспользоваться оператором //
	— он сразу делит нацело.
    
	Секунды можно получить, взяв остаток от деления суммарного времени
	на 60 (оператор %).

******************************************
	def calc_stat(listened):  # от англ. calculate statistics, посчитать статистику
		N = len(listened)
		Sec = 0
		for c in listened:
			Sec += c
		M = int(Sec / 60)
		S = Sec % 60
		return f'Вы прослушали {N} песен, общей продолжительностью {M} минут и {S} секунд.'
			
	print(calc_stat([193, 148, 210, 144, 174, 159, 163, 189, 230, 204]))
******************************************
===============================================================================
