Метод split()

Разбить фразу на слова, и вообще разделить строку по определённому символу
можно методом split(). В результате получится список строк.

Метод split() принимает аргумент, указывающий, какой разделитель использовать.

	blok_string = 'Ночь. Улица. Фонарь. Аптека' 
	# из строки получаем список, где строку делят по сочетанию точки и пробела:
	blok_list = blok_string.split('. ')
	print(blok_list) 

	['Ночь', 'Улица', 'Фонарь', 'Аптека'] 

	# можно получить, к примеру, последнее слово:
	print(blok_list[-1]) 

	Аптека 

Замечание. Да, Python позволяет использовать отрицательные индексы для обращения
к элементам списка. При этом -1 соответствует последнему элементу,
-2 — предпоследнему, и т.д. В общем случае, blok_list[-k] — это то же самое,
что blok_list[len(blok_list) - k], только короче. Например, если нужен пятый
символ с конца списка s, можно написать s[len(s) - 5] или, короче, s[-5].

Если в вызове split() не указывать разделитель, то строка разобьётся по пробелам:

	blok_string = 'Ночь. Улица.  Фонарь. Аптека.'
	# из строки получаем список:
	blok_list = blok_string.split()
	print(blok_list) 

	['Ночь.', 'Улица.', 'Фонарь.', 'Аптека.'] 

Тогда появятся лишние точки на концах слов. Их удобнее всего убирать методом
strip() — он убирает указанные символы в начале и в конце.

	# хотим "Ночь" без точки
	print(blok_list[0].strip('.')) 

	Ночь 

Чтобы вам было удобнее решать задачи - мы подготовили шпаргалку.(py05.pdf)
Откройте ее в соседнем окошке или распечатайте и держите под рукой. 

===============================================================================
Тренажер

Задача 1/2:

Имеется список запросов к Анфисе queries . Необходимо определить, какие из них
адресованы Анфисе, а какие — другим людям. Напишите функцию check_query(),
которая принимает запрос как параметр, анализирует его и возвращает один из
двух вердиктов:

    строку 'запрос к Анфисе', если запрос начинается с обращения к Анфисе,
    строку 'запрос к кому-то ещё', если нет.

Код вывода результатов на экран уже написан в основном теле программы.

Подсказка:

Методом split() разделите строку по запятой или пробелу. Сохраните подстроки
в списке. Если первый элемент равен строке 'Анфиса', функция возвращает одно
сообщение, а в остальных случаях — другое.

******************************************
	def check_query(query):
	# напишите код тела функции
		block_list = query.split(', ')
		if block_list[0] == 'Анфиса':
			return 'запрос к Анфисе'
		else:
			return 'запрос к кому-то ещё'

	# дальше следует код, вызывающий вашу функцию; не изменяйте его:
	queries = [
		'Анфиса, сколько у меня друзей?',
		'Андрей, ну где ты был?',
		'Андрей, ну обними меня скорей!',
		'Анфиса, кто все мои друзья?'
	]

	for q in queries:
		result = check_query(q)
		print(q, '-', result)
******************************************

Задача 2/2:

Вы умеете звать Анфису. Теперь надо научить её распознавать суть запроса.
Отделите обращения — перепишите функцию check_query() так, чтобы она возвращала:

    Например, для запроса 'Анфиса, сколько у меня друзей?' верните строку
	'сколько у меня друзей?'.
    
	Для запроса 'Серёга, ты где?' — строку 'ты где?'.

У строки, которую она возвращает, не должно быть пробелов в начале и конце.

Подсказка:

Примените метод strip() ко второму элементу списка.
Функция должна возвращать результат этой операции.

******************************************
	def check_query(query):
		tokens = query.split(',')
	# напишите код тела функции
		return tokens[-1].strip(' ')

	# дальше следует код, вызывающий вашу функцию; не изменяйте его:
	queries = [
		'Анфиса, сколько у меня друзей?',
		'Андрей, ну где ты был?',
		'Андрей, ну обними меня скорей!',
		'Анфиса, кто все мои друзья?'
	]

	for q in queries:
		result = check_query(q)
		print(q, '-', result)
******************************************
===============================================================================
