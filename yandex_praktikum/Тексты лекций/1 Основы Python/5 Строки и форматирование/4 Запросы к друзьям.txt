Запросы к друзьям

В предыдущей теме «Словари и множества» вы добавили в код персонального
ассистента Анфисы данные о том, где живут ваши друзья. И она уже умеет
отвечать на следующие запросы:

    Сколько у меня друзей?
    Кто все мои друзья?
    Где все мои друзья?

Сейчас вам предстоит расширить возможности Анфисы. Научить её отвечать
на вопросы про отдельных друзей. Начнём с самого простого вопроса
«ты где?» — внутри Анфисы уже хранятся данные о местоположении. Если, например,
Коля и Соня находятся в списке друзей, то запросы о них будут выглядеть следующим
образом:

    Коля, ты где?
    Соня, ты где?

Чтобы различать вопросы про отдельных друзей от общих вопросов к Анфисе,
будем начинать общие вопросы с прямого обращения, вот так:

    Анфиса, сколько у меня друзей?
    Анфиса, кто все мои друзья?
    Анфиса, где все мои друзья?

Тогда различать просто. Если вопрос начинается с имени «Анфиса», то это
общий вопрос. А если с другого имени, то это вопрос про конкретного друга.
Полагаем, правда, что у нас нет друзей по имени Анфиса. :)

===============================================================================
Тренажер

Задача 1/2:

Это код Анфисы, который вы последовательно писали на протяжении нескольких тем.
Можете запустить его, вспомнить как выполняются запросы из списка queries.

А. Отредактируйте список запросов queries. Все запросы должны начинаться
с обращения Анфиса:

    Анфиса, сколько у меня друзей?
    Анфиса, кто все мои друзья?
    Анфиса, где все мои друзья?
    Анфиса, кто виноват?

Б. Напишите функцию process_query(query). Значение параметра query должно
быть обработано методом split(). Отделите имя в начале от тела запроса
(т.е. от оставшейся части).

    Если запрос начинается с имени «Анфиса», то вызовите функцию process_anfisa(),
	передав в неё тело запроса как параметр. И верните результат выполнения этой
	функции.
    
	Если запрос начинается с другого имени, то пока ничего не делайте — это
	отложим до следующей задачи.

В. Измените в функции runner() вызов process_anfisa() на вызов process_query().

Подсказка:

	Начните с малого в функции process_query(), которая принимает весь запрос и делает следующее:

		tokens = query.split(', ')
		name = tokens[0]
		if name == 'Анфиса':
			... 

******************************************
	DATABASE = {
		'Сергей': 'Омск',
		'Соня': 'Москва',
		'Миша': 'Москва',
		'Дима': 'Челябинск',
		'Алина': 'Красноярск',
		'Егор': 'Пермь',
		'Коля': 'Красноярск'
	}


	def format_count_friends(count_friends):
		if count_friends == 1:
			return '1 друг'
		elif 2 <= count_friends <= 4:
			return f'{count_friends} друга'
		else:
			return f'{count_friends} друзей'


	def process_anfisa(query):
		if query == 'сколько у меня друзей?':
			count_string = format_count_friends(len(DATABASE))
			return f'У тебя {count_string}'
		elif query == 'кто все мои друзья?':
			friends_string = ', '.join(DATABASE.keys())
			return f'Твои друзья: {friends_string}'
		elif query == 'где все мои друзья?':
			unique_cities = set(DATABASE.values())
			cities_string = ', '.join(unique_cities)
			return f'Твои друзья в городах: {cities_string}'
		else:
			return '<неизвестный запрос>'

	def process_query(query):
		data = query.split(', ')
		if data[0] == 'Анфиса':
			return process_anfisa(data[1])
		
	def runner():
		queries = [
			'Анфиса, сколько у меня друзей?',
			'Анфиса, кто все мои друзья?',
			'Анфиса, где все мои друзья?',
			'Анфиса, кто виноват?'
		]
		for query in queries:
			print(query, '-', process_query(query))


	runner()
******************************************

Задача 2/2:

А. Напишите функцию process_friend(name, query), принимающую имя друга name и
запрос query.

    Если друга с указанным именем 'Н' нет в списке, то функция должна вернуть
	сообщение об ошибке У тебя нет друга по имени Н.
    
	Если запрос — «ты где?», то функция должна вернуть сообщения 'Н в городе Г',
	где Г определяется по данным словаря DATABASE.
    
	Если запрос не «ты где?», а какой-то другой, то функция должна вернуть
	сообщение об ошибке <неизвестный запрос>.

Б. Допишите функцию process_query(). Если запрос начинается не с «Анфиса»,
а с другого имени, то вызовите функцию process_friend(name, query),
передав в неё имя друга и тело запроса. И верните результат выполнения этой функции.

В. Добавьте в список queries новые запросы вида:

    Коля, ты где?
    Соня, что делать?
    Антон, ты где?

Подсказка:

Первые три строки функции process_friend() могут выглядеть вот так:

if name in DATABASE:
    if query == 'ты где?':
            city = DATABASE[name] 

******************************************
	DATABASE = {
		'Сергей': 'Омск',
		'Соня': 'Москва',
		'Миша': 'Москва',
		'Дима': 'Челябинск',
		'Алина': 'Красноярск',
		'Егор': 'Пермь',
		'Коля': 'Красноярск'
	}


	def format_count_friends(count_friends):
		if count_friends == 1:
			return '1 друг'
		elif 2 <= count_friends <= 4:
			return f'{count_friends} друга'
		else:
			return f'{count_friends} друзей'


	def process_anfisa(query):
		if query == 'сколько у меня друзей?':
			count_string = format_count_friends(len(DATABASE))
			return f'У тебя {count_string}'
		elif query == 'кто все мои друзья?':
			friends_string = ', '.join(DATABASE.keys())
			return f'Твои друзья: {friends_string}'
		elif query == 'где все мои друзья?':
			unique_cities = set(DATABASE.values())
			cities_string = ', '.join(unique_cities)
			return f'Твои друзья в городах: {cities_string}'
		else:
			return '<неизвестный запрос>'

	def process_friend(name, query):
		if not name in DATABASE:
			return f'У тебя нет друга по имени {name}'
		elif query == 'ты где?':
			city = DATABASE[name]
			return f'{name} в городе {city}'
		else:
			return '<неизвестный запрос>'
		
	def process_query(query):
		data = query.split(', ')
		if data[0] == 'Анфиса':
			return process_anfisa(data[1])
		else:
			return process_friend(data[0], data[1])
		
	def runner():
		queries = [
			'Анфиса, сколько у меня друзей?',
			'Анфиса, кто все мои друзья?',
			'Анфиса, где все мои друзья?',
			'Анфиса, кто виноват?',
			'Коля, ты где?',
			'Соня, что делать?',
			'Антон, ты где?'
		]
		for query in queries:
			print(query, '-', process_query(query))


	runner()
******************************************
===============================================================================
