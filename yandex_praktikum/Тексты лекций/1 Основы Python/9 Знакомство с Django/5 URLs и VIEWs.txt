URLs и VIEWs

Пришло время разобраться, откуда берутся адреса страниц проекта, почему они
именно такие и что это, вообще, такое — «веб-адреса».

Веб-адрес: не дом и не улица

У каждого сайта в интернете есть уникальный веб-адрес, URL .

URL Яндекса — https://yandex.ru/

URL Яндекс.Практикума — https://praktikum.yandex.ru/

На сайтах обычно есть множество страниц, и у каждой из них тоже есть свой URL,
например, https://yandex.ru/images/ на Яндексе или
https://praktikum.yandex.ru/backend-developer/ на Практикуме.

Адреса всех страниц начинаются с названия протокола (http или https) и имени
домена. Например, адреса всех страниц Яндекса начинаются с https://yandex.ru/,
где имя домена — строка yandex.ru.

Когда разговор идёт о страницах определённого сайта — подразумевается,
что речь идёт о страницах в пределах одного домена, так что необязательно
каждый раз упоминать доменное имя.

URL, записанные без указания протокола и головного домена
(backend-developer/ вместо https://praktikum.yandex.ru/backend-developer/),
называют относительными.

Полные адреса (https://praktikum.yandex.ru/backend-developer/) называются
абсолютными.

Понять запрос: список urlpatterns

Работа сайтов обычно устроена по такому принципу: пользователь запрашивает
определённый URL, а сервер возвращает ему нужную веб-страницу. Если пользователь
обратился к несуществующему адресу — сервер отвечает «извини, ошибка 404, страница
не найдена».

Список всех URL, доступных в Django-проекте, хранят в файлах urls.py. В них
указывают относительные адреса, без указания протокола и домена.

Относительные адреса удобны ещё и тем, что можно разместить проект на любом
домене, не изменяя код: имя домена в коде не упоминается.

Несуществующий сайт и его воображаемые адреса

На несуществующем сайте Первиса Эсли bestsite.why есть несколько страниц:

    bestsite.why/about/
    bestsite.why/bio/
    bestsite.why/wishlist/
    и, конечно, главная страница, доступная по адресу домена: bestsite.why/

В файле urls.py этого проекта, как и в любом проекте на Django, перечислены
пары «адрес — функция»: шаблоны (образцы) веб-адресов и имена функций.

	urlpatterns = [
		...
		path('bio/', views.bio),
		path('about/', views.about_me), 
		...
	]

Если запрошенный пользователем URL совпадает с одним из адресов в списке
— будет вызвана функция, указанная в той же строке.

Эти правила, пары «адрес — функция», хранят в списке, который принято называть
urlpatterns.

В Django принято все адреса заканчивать слешем, так что в urlpatterns должно
быть написано wishlist/, а не wishlist.

# список urlpatterns из файла bestsite/urls.py
...

	urlpatterns = [
		# если пользователь обратился к главной странице —
		# Django должен вызвать функцию index() из файла views.py
		path('', views.index), 

		# если пользователь запросил адрес bestsite.why/about/ —
		# Django вызовет функцию about_me() из файла views.py
		# имя функции не обязано совпадать с шаблоном URL
		path('about/', views.about_me), 

		# и здесь та же история: 
		# запросил bestsite.why/bio/ — Django вызовет функцию bio() из views.py
		path('bio/', views.bio),

		# и тут то же самое
		path('wishlist/', views.wishlist),
	]

У главной страницы проекта нет относительного адреса, и поэтому вместо него
ставятся пустые кавычки.

При получении запроса Django проверяет список urlpatterns сверху вниз, и если
в какой-то функции path() находит совпадение запрошенного URL с шаблоном
адреса — вызывает функцию, указанную вторым аргументом.

Вызываемые функции обычно хранят в отдельном файле, традиционно его называют
views.py.

К функции обращаются через точечную нотацию: имя_файла.имя_функции. Например,
views.wishlist вызовет функцию wishlist() из файла views.py.

Адреса страниц и названия функций придумывает разработчик. Однако по их названиям
мы можем предположить, что на странице bio/ описан славный жизненный путь Первиса,
а на странице wishlist/ — какие-то его мечты (розовый кадиллак, синие замшевые
туфли и плюшевый медвежонок). А на главной, предположим, размещено какое-то
приветствие и ростовой портрет в белом костюме с блёстками.

Если перед своим днём рождения (8 января) Первис захочет прозрачно намекнуть,
что неплохо бы подарить ему что-нибудь полезное — он может вывести содержимое
страницы wishlist/ на главную страницу, изменив лишь одну строчку в коде:

# список urlpatterns из файла bestsite/urls.py
...

	urlpatterns = [
		# теперь при обращении к главной странице вызывается та же функция, 
		# что и при обращении к странице wishlist/
		# значит, на главной странице пользователь увидит то же содержимое,
		# что и на странице со списком желаний
		path('', views.wishlist), 
		# ...
		path('wishlist/', views.wishlist),
	]

Теперь любой, кто войдёт на главную страницу, увидит там список желаний Первиса.

Мы взломаем сеть Пентагона.

Обработать запрос: view-функции

Запрос пользователя к странице bestsite.why/about/ будет передан в файл urls.py,
и там функция path() вызовет функцию about(), соответствующую запрошенному адресу.

Функция about() обработает запрос и вернёт пользователю ответ (обычно это код
страницы сайта). В нашем случае ответом будет просто строка текста.

	#  файл bestsite/views.py

	def about(request):
		return HttpResponse("Pervis Esly: I'm the Best") 

Функции, обрабатывающие запрос, получают на вход данные из запроса
(объект request), а возвращают объект ответа: HttpResponse. Такие функции
называют view-функциями или функциями представления (англ. view — «вид,
отображение»; в русском Django-сообществе прижился перевод «представление»).

Как сломать Django

Если в urls.py есть ссылка на view-функцию, а самой функции не существует
— Django откажется работать. Опечатки в имени функции или ошибки в адресах
файлов сломают код. Всё поправимо: найти баг и пофиксить его — это традиционный
вид спорта у разработчиков.

===============================================================================
Тренажер - проект

Задача:

В коде приложения homepage сохранена строка, которую вы увидите, если откроете
главную страницу проекта в браузере.

Найдите файл, в котором отдаётся этот текст. Замените возвращаемый текст
на строку «Анфиса для друзей».

Подсказка:

Текст главной страницы хранится в файле views.py в директории приложения homepage.
Проверьте, что текст, является строкой (заключён в кавычки ' ').

Проект в папке progect_5
===============================================================================
