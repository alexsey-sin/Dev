Как устроены проекты

«Пишите программы, которые делают что-то одно и делают это хорошо».
Дуг Макилрой написал это про Unix, но такая формулировка как нельзя лучше
подходит к идее приложений в Django.

Приложения — максимально независимые части проекта. Каждое приложение в
проекте отвечает за решение одной определённой задачи.

Например, в интернет-магазине одно приложение будет отвечать за каталог
товаров, другое — за справочную систему, а третье — за доставку. Это будут
почти автономные программы, которые можно подключить, отключить или применить
в другом проекте.

Лучший Django-проект — это гамбургер

В составе гамбургера:

    Булочка, разрезанная пополам.
    Котлета.
    Дополнение (пусть это будет ломтик сыра).

Договоримся о названиях:
Гамбургер — это будет проект, система, готовая к работе.
Составные части гамбургера (булочка, котлета, сыр и прочее) — это приложения
в проекте. Да, даже сыр.
Каждая часть проекта Гамбургер решает свою определённую задачу.

    Булочка механически объединяет детали и не даёт пользователю гамбургера
	перепачкаться (хотя вторая цель достигается не всегда).
    
	Котлета — насыщающая часть проекта, поставщик протеина в организм пользователя.
    
	Сыр даёт вкусовой акцент, он делает проект «красивее» с точки зрения
	вкусового дизайна.

Разбивать проект на приложения — это удобно.

    Дорабатывать проект становится проще. При изменении, добавлении или удалении
	определённых частей проекта нет необходимости исправлять весь остальной код.
	При замене пшеничной булочки на ржаную не придётся что-то делать с котлетой
	и сыром (попробуйте-ка заменить в булочке изюм на орешки — это будет задача
	совсем иного уровня).
    
	Работу можно разделить между несколькими группами программистов: каждая
	команда займётся своей частью кода, независимо от других. Так проект будет
	готов быстрее. Посмотрите, как работают рестораны быстрого питания: булочками
	занимается один человек, котлетами другой, а потом всё это монтируется в
	готовый проект «гамбургер».
    
	Готовые приложения можно копировать в другие проекты. Подключил — и готово.
	В этой части фастфуд явно проигрывает программированию: скопировать одну
	котлету в несколько разных бургеров не получится, а в программировании
	— запросто.

Как работает повторное использование приложений

Добавим в меню вегетарианский бургер, назовём его «проект Нутбургер». Он чем-то
похож на Гамбургер: для обоих этих проектов нужна булочка. Так что возьмём
приложение «булочка» из проекта Гамбургер, а остальную часть проекта допишем.

Проект: Нутбургер.

Приложение 1: Булочка.

Приложение 2: Котлета из нута.

Приложение 3: Добавим лист салата. Будет вкусно.

В сравнении с производством «с нуля» работы оказалось меньше почти на треть.

Неплохо!

Расширим ассортимент.

Встречайте! Малоуглеводный протеинбургер! Оригинальный рецепт: лист салата
вместо булочки.

Проект: Протеинбургер
Приложение 1: Лист салата — из проекта Нутбургер.
Приложение 2: Котлета — из проекта Гамбургер.
Приложение 3: Ломтик сыра — опять из проекта Гамбургер.
Получается, можно собрать проект Протеинбургер (специальная цена для вашего
здоровья, только в нашем ресторане) из готовых приложений. Остаётся только
придумать оригинальную упаковку.

В разработке проектов на Django используется именно такой принцип: готовые
приложения включаются в проекты со сходными задачами.

Например, в проекте интернет-магазина Awazon могло бы быть несколько приложений:

    wiki — своя маленькая википедия, справочник
    catalog — система управления товарами
    cart — приложение для управления покупками
    delivery — интеграция с системами доставки

Из проекта можно удалить вики - и ничего не сломается. Можно скопировать
приложение catalog из Awazon в новый проект ReviewIt — и получится сайт-каталог.
А потом взять из какого-то третьего проекта приложение comments и тоже добавить
его в ReviewIt — и получится сайт с отзывами покупателей на товары. Это как ЛЕГО:
сборка проекта из готовых деталей. А если нужна особенная деталь — всегда можно
её написать.




























