Запуск проекта в тренажере. Settings

Код, который вы будете писать в Django, можно запустить только на сервере.

Загрузку и запуск кода на сервере программисты называют deploy.

Программы, которые вы напишете в тренажёре, тоже нужно деплоить: после нажатия
на кнопку «Задеплоить» ваш код будет загружен на сервер Яндекс.Практикума
и запущен там.

После деплоя в верхнем правом углу тренажёра появится веб-адрес, по которому
ваш проект будет доступен в сети. Этот адрес не постоянный: он может изменяться
от задачи к задаче. В тексте теории и заданий мы будем заменять его символами {URL}.

После выполнения задания и деплоя нажмите кнопку «Проверить»: при этом будут
запущены автоматические тесты, которые покажут, нет ли ошибок в вашем коде.
Ограничений на количество проверок нет.

Не забывайте деплоить код перед каждой проверкой, иначе будет тестироваться
предыдущая версия.

    Если при работе что-то пошло не так — посмотрите в правый нижний угол
	Django-тренажёра: там находится терминал, окно для вывода служебной
	информации и сообщений об ошибках. 

Прочтите внимательно текст сообщения в терминале: в большинстве случаев
вы увидите там описание ошибки и подсказку, в каком месте кода эта ошибка обнаружена.

Ещё из интересного: если в терминале вы видите строчку вида [21/Nov/2020 12:18:34]
"GET / HTTP/1.1" 200 332 — это значит, что в 12:18 на ваш сервер пришёл GET-запрос,
сервер дал ответ с кодом 200 (этот код означает «всё хорошо»), и ответ был размером
332 байта.

Ход работы при выполнении заданий будет таким:

    Написать код
    Нажать кнопку «Задеплоить»
    Посмотреть результат в новой вкладке по адресу {URL}
    Нажать кнопку «Проверить»
    Ура, работает, идём дальше! или Обнаружена ошибка, переписываем код, возврат
	к пункту 1.

Инкубатор для Анфисы

Для работы в тренажёре подготовлен Django-проект Anfisa4friends. Пока что он
пустой, но в ходе работы вы расширите его до нескольких приложений и напишете
гору функций. В проекте пока что нет ни одного приложения, но он уже работает!

Структура проекта сейчас такая:

	├── anfisa4freinds
	│   ├── settings.py
	│   └── urls.py  
	└── manage.py

manage.py отвечает за взаимодействие с консолью: обращаясь к нему из командной
строки, можно устанавливать дополнительные библиотеки, создавать приложения и
регистрировать пользователей — и всё это в несколько коротких команд. Он хороший
и полезный, хотя в тренажёре и не используется. Вы познакомитесь с ним на основном
курсе бэкенда, когда решитесь его пройти.

anfisa4friends/urls.py (от англ. Uniform Resource Locator, «система
унифицированных адресов электронных ресурсов»). В этом файле хранят список
всех доступных URL проекта.

Файл anfisa4friends/settings.py (англ. settings, «настройки») хранит глобальные
настройки проекта. Здесь настраиваются права доступа, подключаются библиотеки,
указывается язык сайта, здесь же регистрируются приложения (app) проекта.
Файл настроек settings.py часто называют конфиг.

В проекте Anfisa4friends конфиг выглядит так (в листинге код немного сокращён,
полностью файл доступен в коде проекта):

	# Django settings for anfisa4friends project.

	# SECURITY WARNING: keep the secret key used in production secret!
	SECRET_KEY = '0+-ju&2t-r7==7gs&_@-#q8om7i&lelii&as$b*sjc(j7xcgvv'
	import os
	# SECURITY WARNING: don't run with debug turned on in production!
	DEBUG = True

	# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
	BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

	ALLOWED_HOSTS = ['*']

	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		...
		...
	]

	MIDDLEWARE = [
		'django.middleware.security.SecurityMiddleware',
		...
		...
	]

	TEMPLATES = [
		{
			'BACKEND': 'django.template.backends.django.DjangoTemplates',
			'DIRS': [],
			'APP_DIRS': True,
			'OPTIONS': {
				'context_processors': [
					'django.template.context_processors.debug',
					...
					...
				],
			},
		},
	]

	DATABASES = {
		'default': {
			'ENGINE': 'django.db.backends.sqlite3',
			'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
		}
	}

	ROOT_URLCONF = 'anfisa4friends.urls'
	# Database
	# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

	# Password validation
	# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

	AUTH_PASSWORD_VALIDATORS = [
		{
			'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
		},
		...
		...
	]

	# Internationalization
	# https://docs.djangoproject.com/en/2.2/topics/i18n/

	LANGUAGE_CODE = 'en'
	...
	...

	# Static files (CSS, JavaScript, Images)
	# https://docs.djangoproject.com/en/2.2/howto/static-files/

	STATIC_URL = '/static/'

Это не мантры-колдограммы, это настройки проекта в виде константа = значение.

Переменные, значения которых оставляют неизменными, в Python называют константами
и пишут заглавными буквами.

SECRET_KEY — константа для создания секретных ключей. Django заботится о
безопасности проекта.

DEBUG — логическая переменная, включающая режим отладки. При DEBUG = True
сообщения об ошибках будут выводиться прямо на страницу проекта. Перед
публикацией проекта (перед тем, как открыть проект для посетителей)
устанавливают DEBUG = False, чтобы не изумлять неискушённых пользователей
непонятными заклинаниями, выведенными на экран.

ALLOWED_HOSTS — список доменных имён и IP, на которых может отображаться
наш проект. Символ * означает «любой домен», то есть никаких ограничений нет.

INSTALLED_APPS — список установленных в проекте приложений. Пока что там только
служебные приложения, но скоро вы добавите и свои.

ROOT_URLCONF — адрес файла, в котором хранятся списки всех доступных URL проекта.
Сейчас константа указывает на файл urls.py в директории anfisa4friends.

LANGUAGE_CODE отвечает за языковые настройки.

===============================================================================
Тренажер - проект

Задача:

Работа с ошибками, поиск и исправление багов — это заметная часть процесса
разработки.

Это задание будет состоять исключительно из ошибок. Делайте предумышленные
ошибки, деплойте и смотрите в терминал тренажёра: система напишет, какая
обнаружена ошибка и где она.

После проверки верните код в исходное состояние и ломайте следующий фрагмент.

Эта привычка пригодится вам в дальнейшем: в любой непонятной ситуации смотрите
в терминал. Время портить проект.

    Придумайте код несуществующего языка и поставьте его в LANGUAGE_CODE.
	Что там в терминале?
    
	В LANGUAGE_CODE уберите кавычки, обрамляющие код языка. Как тебе такое,
	терминал?
    
	Удалите константу ROOT_URLCONF вместе с её значением. Как терминал? Ругается?

Попробуйте сломать что-нибудь по собственному выбору, посмотрите, что вам
выдаст терминал. По окончании работы восстановите код (кнопка «Начать заново»),
задеплойте и нажмите «Проверить».

Подсказка:

Терминал покажет описание ошибки и строку, в которой допущена ошибка.
Обычно этого хватает, чтобы начать ловлю багов. Если вам непонятен смысл
сообщения, которое вы видите в терминале — вспомните, что до вас с этой
проблемой уже сталкивались многие. Ответы есть на форумах и тематических
сайтах, надо просто сделать запрос в поисковую систему.

Проект в папке progect_3
===============================================================================
