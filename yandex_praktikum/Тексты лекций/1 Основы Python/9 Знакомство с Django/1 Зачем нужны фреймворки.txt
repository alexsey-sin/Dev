Зачем нужны фреймворки

В совершенно разных проектах разработчики вынуждены решать стандартные задачи.
Раз за разом программисты пишут системы хранения и модификации данных,
инструменты для управления аккаунтами, программы для отображения информации
на экране пользователя. Эти системы есть почти в каждом проекте, также как
у любого дома есть стены, крыша и окна.

Предположим, нужно обзавестись жильём.

Можно сделать всё самостоятельно. Изготовить кирпичи и сложить стены.
Напилить досок и сделать окна, двери и табуретки. Не забыть бы про плитку
в ванной, трубы и тысячу других вещей.

Долго. Дорого. Неэффективно. Сложно в обслуживании (никто не знает, как у вас
всё устроено).

А можно купить готовую квартиру: у неё есть внешние стены, подведена вода,
отопление, канализация и свет. Останется установить внутренние стены,
наклеить обои и поставить мебель.

Такая квартира — это фреймворк, основа проекта. Перенести несущие стены или
сделать из неё самолет или корабль не получится, но всё, что внутри, можно
менять в довольно широких рамках. Мраморный пол, махровый халат в ванной
и мягкий кот? На здоровье. Чёрные стены, кованые шторы и свирепый доберман?
Пожалуйста.

Можно сделать всё, что угодно. Фреймворк позволит быстро обустроиться и жить
с комфортом.

В разработке всё устроено аналогично. Можно всё сделать самому, а можно взять
фреймворк, который создаст каркас файловой структуры, подключит полезные
библиотеки, предоставит возможность применить модули других разработчиков.
В результате задача будет решена качественно и без лишних усилий.

На Python написана масса фреймворков для распознавания изображений или голоса,
для работы с большими данными, для создания игр и мобильных приложений,
для получения данных с сайтов и их обработки — список можно продолжать долго.

В этом курсе вы будете работать с фреймворком Django — одним из наиболее
популярных фреймворков для веб-разработки на Python.

За что любят Django

Django работает в Instagram, Disqus, Mozilla, The Washington Times, Pinterest,
National Geographic и, конечно, в проектах Яндекс.Практикум.

Экосистема и расширяемость

В Django входит большое количество сторонних приложений, типовых блоков, как
в конструкторе Лего. В официальном каталоге есть сотни плагинов и библиотек,
которые помогут быстро и качественно разработать проект: в большинстве случаев
нужно лишь выбрать подходящую библиотеку и, если потребуется, немного доработать
код.(https://djangopackages.org/)

Сообщество

Django появился в 2005 году. С тех пор тысячи специалистов решили сотни тысяч
задач и поделились своим опытом в интернете. Если возник вопрос — стоит как
следует поискать в сети, и ответ найдется. Поиск ответов на вопросы — одна
из важных составляющих в профессии разработчика, и при работе в Django такой
поиск всегда даст результат.

Настраиваемая админка

Система управления информацией (админ-зона проекта, «админка») в Django
создаётся автоматически. При необходимости её можно настроить в очень широких
пределах.

Работа с базами данных

С базами данных Django общается через инструмент Django ORM (объектно-реляционное
отображение). Это «переводчик» с языка Python на язык SQL, понятный большинству
баз данных. Благодаря Django ORM все запросы к базе данных можно писать прямо
на Python.

В этом курсе вы напишете учебный проект на Django, и это будет интересно.

Скачайте шпаргалку, она пригодится при выполнении заданий этой темы.
(Шпаргалка Знакомство с Django.pdf)
