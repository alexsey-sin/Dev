Время icecream. Импорт. Первое испытание

Главная страница в проекте «Анфиса для друзей» уже есть, добавим ещё пару страниц:

    Страницу со списком сортов мороженого
    Страницу с подробным описанием каждого сорта мороженого

Этими страницами будет управлять приложение icecream. Директория и файлы приложения
уже добавлены в проект:

	├── anfisa4friends  
	│   ├── settings.py
	│   └── urls.py
	├── icecream  # добавлено новое приложение
	│   ├── views.py
	│   └── urls.py
	├── homepage  
	│   ├── views.py
	│   └── urls.py
	└── manage.py

Перед началом работы — история о том, как заставить отдельные файлы проекта
работать вместе.

Импортируй это

Библиотека (или модуль) — это набор готовых функций, объединённых общей темой.
Например, в библиотеке math собраны функции для подсчёта математических величин,
а в библиотеке datetime, как ясно из названия, инструменты для работы с датами.

Чтобы в коде получить доступ к этим библиотекам, нужно в начале файла
импортировать (иначе говорят «подключить») библиотеку.

Вот как выглядит импорт библиотеки math и вызов функции sqrt(), извлекающей
квадратный корень:

	import math 
	# теперь в коде этого файла можно вызывать любую функцию из библиотеки math

	# вызвать функцию sqrt() из импортированной библиотеки math
	print(math.sqrt(16))
	# будет напечатано: 4.0 

Для удобства можно дать импортируемому файлу или библиотеке другое имя, и в коде
обращаться к импортированной библиотеке по этому новому имени.

	# импортировать библиотеку math и переименовать её в 'mt'
	import math as mt 

	# вызвать функцию sqrt() из импортированной библиотеки, которую теперь зовут 'mt'
	print(mt.sqrt(16))
	# будет напечатано: 4.0

	# а вот так уже не сработает. Переименовали — значит переименовали.
	print(math.sqrt(16)) 

Python позволяет импортировать не только библиотеки и файлы, но и отдельные
функции из библиотек:

	# из библиотеки math импортировать функцию sqrt()
	from math import sqrt

	# при вызове отдельно импортированной функции 
	# нужно обращаться к ней напрямую, а не через имя библиотеки
	print(sqrt(16))
	# будет напечатано: 4.0 

Импорт работает и с файлами, которые вы напишете самостоятельно.
Предположим, в выдуманной директории /calculator лежат два файла, variables.py
и sum.py

	└──  calculator  
		├── variables.py
		└── sum.py 

В файле sum.py нужно сложить переменные, хранящиеся в variables.py

	# файл variables.py

	one_hundred = '100'
	five_hundred = '500'
	thousand = '1000'

	# файл sum.py

	# из той же директории, где лежит этот файл 
	# импортируем файл variables.py;
	# символ "точка" означает собственную директорию того файла,
	# в котором мы пишем директиву import
	from . import variables  

	# сложить переменные 
	# one_hundred и five_hundred 
	# из импортированного файла variables
	howmany = variables.one_hundred + variables.five_hundred 

	# и напечатать результат
	print(howmany)
	# будет напечатано: 100500 
	# а почему не 600, кстати?

Можно импортировать не весь файл, а только необходимые константы, переменные
или функции из него:

	# файл sum.py

	# импортируем две переменные из файла variables 
	from .variables import one_hundred
	from .variables import five_hundred  

	howmany = one_hundred + five_hundred 

	print(howmany)
	# будет напечатано: 100500

	# а если отсюда обратиться к переменной thousand — получим ошибку: 
	# мы её не импортировали, её не видно из кода
 
Обратите внимание, что при импорте отдельных объектов (переменных или функций)
в коде к ним нужно обращаться, не указывая их расположение: one_hundred, а не
как в случае с импортом файла — variables.one_hundred

Кстати, импортировать несколько объектов из одного файла правильнее одной
директивой import, указав имена объектов через запятую. Такая запись правильнее
и лаконичнее.

Импорт переменных из файла variables.py теперь будет выглядеть так:

	from .variables import one_hundred, five_hundred   

Инструкция для импорта записывается в формате from .<адрес модуля/пакета>
import X, где символы точки . показывают, на сколько директорий «вверх» нужно
подняться. Одна точка означает текущую директорию, две точки .. — на одну
директорию «вверх по дереву».

Ради чего всё это?

Для того, чтобы из файла urls.py можно было обратиться к view-функциям в
файле views.py — нужно импортировать views.py в urls.py!

	#  файл icecream/urls.py

	from . import views 
	# теперь-то эта строка приобрела смысл:
	# без неё функции path() просто не смогут обратиться 
	# к view-функциям из файла views.py

===============================================================================
Тренажер - проект

Задача:

Пришло время настоящих испытаний.

Настройте обработку адреса icecream/: при запросе к этому адресу должен
выводиться текст «Здесь будет список сортов мороженого» (сам список сортов
вы выведете в следующих уроках: слона лучше есть по частям).

    Зарегистрируйте приложение icecream в проекте.
    
	К головному файлу urls.py подключите urls.py приложения icecream так,
	чтобы все запросы, начинающиеся с icecream/, обрабатывались бы в файле
	icecream/urls.py
    
	В файле icecream/views.py cоздайте функцию icecream_list(), возвращающую
	HttpResponse с фразой «Здесь будет список сортов мороженого».
    
	Добавьте в файл icecream/urls.py правило, связывающее адрес icecream/
	с view-функцией icecream_list().

Задеплойте проект и откройте адрес {URL}/icecream/

Вместо {URL} должен быть адрес вашего сервера, он будет виден после деплоя
в правом верхнем углу тренажёра.

Откройте этот адрес в отдельной вкладке браузера и допишите к нему icecream/.

Подсказка:

    Вы уже добавляли в конфиг приложение homepage. Добавьте icecream
	в тот же список. На следующей строчке, в кавычках, через запятую после
	homepage.
    
	В файле anfisa4friends/urls.py в список urlpatterns добавьте строку
	path('icecream/', include('icecream.urls')), а в icecream/urls.py
	установите вызов view-функции: path('', views.icecream_list).
    
	Код view-функции можно подсмотреть в homepage/views.py. Напишите «такую же,
	но другую». Название и текст должны отличаться, а в остальном — всё то же.
    
	Импортируйте файл icecream/views.py в icecream/urls.py, иначе вообще
	ничего не заработает: без импорта правило path() из urls.py не увидит
	view-функцию из файла views.py. Файлы находятся в одной директории,
	так что адрес импортируемого файла указывается через символ «точка»:
	from . import имя_файла

Проект в папке progect_7
===============================================================================
