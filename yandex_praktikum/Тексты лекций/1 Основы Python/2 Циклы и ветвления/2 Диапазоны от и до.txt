Диапазоны от и до

Зачастую возникает необходимость создать и обработать последовательность
целых чисел в определённом диапазоне. Например, нужно узнать сумму всех
целых чисел от 3 до 5 или просто перечислить все номера вагонов поезда.

Можно вручную создать список из чисел, но есть способ проще: в Python
есть функция range(). В неё передаются два целых числа: начало и конец
диапазона. В результате будет создана последовательность, включающая все
целые числа в указанном диапазоне.

Особенность этой последовательности в том, что в неё не включается последнее
число диапазона:

	three = range(0, 3)
	# Последовательность three будет включать в себя числа 0, 1 и 2.
	# Тройка в эту последовательность не войдёт: 
	# последнее число в последовательность не включается.  

Числа могут быть и отрицательными, важно лишь, чтобы первое число было
меньше второго.

	around_zero = range(-3, 3)
	# Последовательность around_zero будет включать в себя числа -3, -2, -1, 0, 1 и 2. 

Приятная особенность последовательности range() состоит в том, что её можно
обрабатывать в цикле, как обычный список.
Например, можно сделать так:

around_zero = range(-3, 3)

	# Вместо списка в цикл передаётся переменная around_zero, 
	# в ней хранится range() от -3 до 3
	for i in around_zero:
		# Перебрать все числа в диапазоне от -3 до 3 и напечатать их:
		print(i)
	# Будет напечатано
	# -3
	# -2
	# -1
	# 0
	# 1
	# 2

Внутреннюю переменную цикла, в которую передаются числа из последовательности,
традиционно называют i, но её можно назвать как угодно.

Задать диапазон можно прямо в условии цикла, без промежуточной переменной
around_zero.

	# Цикл переберёт все числа в диапазоне от -3 до 3 и напечатает их:
	for i in range(-3, 3):
		print(i)

	# Результат будет тот же 

Список вагонов через range()

Запустите код и посмотрите, что он напечатает. Замените в range() параметры
на какие-нибудь другие — и вновь запустите код.

Будьте внимательны: помните, что второе число в range() — это «точка остановки»,
счётчик останавливается перед ним, это число не включается в последовательность.

	for i in range(1, 5):
		print("Вагон №" + str(i))

Как и в ситуации с обычным списком, цикл будет по очереди передавать каждое
число из диапазона range в переменную i. А в теле цикла эта переменная будет
печататься.

Задача 1

В этом уроке четыре задачи. Напечатайте магическую мантру, она поможет
справиться с ними:

	Я расправлюсь с задачей 1
	Я расправлюсь с задачей 2
	Я расправлюсь с задачей 3
	Я расправлюсь с задачей 4
	Я всех победю!

Вместо многоточий вставьте необходимый код — имя переменной и диапазон.
Внутреннюю переменную цикла можно назвать i: так традиционно называют переменную,
принимающую числа из последовательного числового ряда.

	for i in range(1,5):
		print('Я расправлюсь с задачей', i)

	print('Я всех победю!')

	Результат

	Я расправлюсь с задачей 1
	Я расправлюсь с задачей 2
	Я расправлюсь с задачей 3
	Я расправлюсь с задачей 4
	Я всех победю!

Задача 2

Если бы Джек, который построил дом, строил его из чисел, дом выглядел бы так:

	Это первый этаж.
	А это 2 этаж, он на один выше, чем этаж 1
	А это 3 этаж, он на один выше, чем этаж 2
	... 

Постройте с помощью цикла десятиэтажный дом. Последней строкой цикл должен
вывести такую:

А это 10 этаж, он на один выше, чем этаж 9 

	print('Это первый этаж.')
	# Первый этаж построен, начинайте строить со второго
	for i in range(1,10):
		# Здесь вместо многоточий
		# вставьте номер текущего этажа,
		# вычислите и вставьте номер предыдущего этажа.
		print('А это', i+1, 'этаж, он на один выше, чем этаж', i)
	
Результат

Это первый этаж.
А это 2 этаж, он на один выше, чем этаж 1
А это 3 этаж, он на один выше, чем этаж 2
А это 4 этаж, он на один выше, чем этаж 3
А это 5 этаж, он на один выше, чем этаж 4
А это 6 этаж, он на один выше, чем этаж 5
А это 7 этаж, он на один выше, чем этаж 6
А это 8 этаж, он на один выше, чем этаж 7
А это 9 этаж, он на один выше, чем этаж 8
А это 10 этаж, он на один выше, чем этаж 9

это 10 этаж, он на один выше, чем этаж 9

Список задом наперёд

Если нужно пройтись по списку или по диапазону чисел в обратном порядке
— вызывайте функцию reversed(): она переворачивает и список, и диапазон;
чтение любой последовательности начнётся с конца.

Вот, например, симулятор новогодних курантов.

Функция range() не включает в последовательность чисел второй аргумент,
так что для reversed(range(1, 13)) отсчёт начнётся с 12.

	for i in reversed(range(1, 13)):
		print(i, 'бомм!')

	print('C новым годом!')

С новым счастьем.
Функция reversed() может развернуть в обратном направлении любую последовательность:

	# Можно обратить вспять обычный список: 
	seasons = ['зима', 'весна', 'лето', 'осень']

	for season in reversed(seasons):  
		# Переменную цикла, в которую 
		# будут передаваться элементы "перевёрнутого" списка seasons,
		# назовём season
		print(season) 

Задача 3

Разверните год наоборот: напечатайте месяцы в обратном порядке.

	months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']

	for m in reversed(months):
		print(m)

	Результат

	Декабрь
	Ноябрь
	Октябрь
	Сентябрь
	Август
	Июль
	Июнь
	Май
	Апрель
	Март
	Февраль
	Январь

Полезная переменная снаружи цикла

Почему бы теперь не написать циклом стихотворение про зайчика:

1, 2, 3, 4, 5, вышел зайчик погулять!  

Здесь числа и фрагмент текста объединены в одну строку. Это означает, что
задачу не удастся решить, печатая числа прямо из цикла (в этом случае каждое
число окажется на отдельной строке).

Сначала все части строки нужно записать в дополнительную переменную, и потом
напечатать её одним вызовом print().

Эту переменную назовём bunny_counter и объявим снаружи цикла. На каждой
итерации цикла будем дописывать в неё очередное число из range(), после 
чисел в эту же переменную допишем фразу «вышел зайчик погулять!» — и готово,
можно печатать!

Числа из range() надо преобразовать в строку, иначе не получится объединить
их с текстовой строкой.

Запустите код, и искусственный почти-разум напишет своё первое стихотворение. 

	bunny_counter = ''  # Создали переменную bunny_counter, её значение - пустая строка.

	for i in range(1, 6):
		# На каждой итерации цикла
		# к переменной bunny_counter будет дописываться
		# очередная цифра, запятая и пробел (чтобы числа в строке не слиплись).
		# Получившееся значение будет присвоено той же переменной bunny_counter
		bunny_counter = bunny_counter + str(i) + ', '

	print(bunny_counter + 'вышел зайчик погулять!')

Попробуйте изменить код и запустить его вновь. Например, можно досчитать до
другого числа и выдумать новую рифму.

Задача 4

Настало время великих стартов: Tesla улетела на гелиоцентрическую орбиту за
Марсом, а вам предстоит отправить ракету с питоном на Сатурн.

Сгенерируйте строку с обратным предстартовым отсчётом.

Она должна выглядеть так:

10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, поехали! 

Это задание очень похоже на пример со считалкой про зайца, этим можно
воспользоваться.

	countdown_str = ''

	for i in reversed(range(11)):
		countdown_str = countdown_str + str(i) + ', '

	countdown_str = countdown_str + 'поехали!'

	print(countdown_str)

	Результат

	10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, поехали!

