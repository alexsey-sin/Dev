Составные логические выражения

Логические операторы можно объединять в составные выражения. В таких выражениях
операторы выполняются не в порядке записи, а в порядке приоритета: высший
приоритет у not, затем выполняется and, а последним — or.

С оператором not вы ещё не встречались. Пришло время разобраться и с ним.

Оператор not: not True == False

Оператор not — это логическое отрицание, он возвращает True, если выражение равно
False и наоборот.

Для примера можно вывести на печать результаты применения оператора not:

	print(True)
	# Без неожиданностей, будет напечатано: True

	print(not True)
	# Будет напечатано: False

	print(not False)
	# Будет напечатано: True

Любая операция сравнения возвращает True или False. А оператор not просто
превращает эти значения в их противоположности:

	print(5 > 3) 
	# Будет напечатано: True

	print(not 5 > 3)
	# Будет напечатано: False

not на практике

Напечатаем на экране стихотворение о погоде. Текст зависит от того, какое
значение присвоено переменной wind.

Потестируйте код: присвойте переменной wind значение False.

	wind = True

	# Есть ли ветер?
	if not wind: # Если wind НЕ равен True
		print('Ночь тиха')
	else:
		print('Поднялся ветер')
		print('Серые тучи развеял')
		print('Новые тянутся с юга')

	# Будет напечатано:
	# Поднялся ветер
	# Серые тучи развеял
	# Новые тянутся с юга

А если убрать из кода оператор not (попробуйте и это) — программа начнёт
печатать неподходящие к погоде строки.

Ветер может быть разной силы. Проверим, не сдует ли нас, если пойти гулять.

	beaufort = 6  # Сильный ветер

	if beaufort <= 5:
		print('Идём гулять, на улице хорошо')
	else:
		print('Штормит, сидим дома, читаем Практикум')

	# Будет напечатано:
	# Штормит, сидим дома, читаем Практикум

Теперь напишем программу, которая определяет погоду по совокупности данных и
выводит на экран сообщение Идём гулять, на улице хорошо, если:

    не идёт дождь или не сильно ветрено (ветер одновременно с дождём — это
		неприятно);
    при этом температура воздуха больше 20 градусов.

Программа состоит из нескольких логических выражений:

	# Передадим в программу данные
	beaufort = 6  # Сильный ветер
	is_raining = False  # Дождя нет
	temperature = 16

	if not is_raining or beaufort <= 4 and temperature > 20:
		print('Идём гулять, на улице хорошо')
	else:
		print('Сидим дома, читаем Практикум')

	# Будет напечатано: Идём гулять, на улице хорошо

Как так «на улице хорошо», если за окном лишь 16 градусов, а прогулка предусмотрена
от +20°?

Разберёмся.

Вначале вычисляется значение каждого выражения, в том числе и с not:

not is_raining — результат True

beaufort <= 4 — результат False

temperature > 20 — результат False

Затем применяются оставшиеся логические операторы, сначала and, у него приоритет
выше

beaufort <= 4 and temperature > 20 → False and False → False

Далее идет проверка: если истинно хотя бы одно из условий, not is_raining
или beaufort <= 4 and temperature > 20 — сообщается о хорошей погоде.

Да, выражение not is_raining истинно, значит, выводится сообщение Идём гулять,
на улице хорошо, хотя на самом деле всё наоборот.

Чтобы исправить код — переопределим порядок вычислений скобками:

	# передадим в программу данные
	beaufort = 6  # сильный ветер
	is_raining = False  # дождя нет
	temperature = 16

	if (not is_raining or beaufort <= 4) and temperature > 20:
		print('Идём гулять, на улице хорошо')
	else:
		print('Сидим дома, читаем Практикум')

	# Будет напечатано:
	# Сидим дома, читаем Практикум

Да, ответ верный, для прогулки в шортах прохладно, самое время покодить.
Теперь вычисления прошли в нужном порядке: в первую очередь были выполнены
операции в скобках:

    not is_raining or beaufort <= 4 → True or False → True
    (not is_raining or beaufort <= 4) and temperature > 20 → True and False → False

===============================================================================
Тренажер

Задача 1/2:

Выполните код: мальчик хороший, а программа называет его неряхой. Исправьте
код оператором not.

Подсказка:

Условие, которое проверяется в if, нужно изменить на обратное: «если мальчик
НЕ хороший, то...». Для этого есть оператор not.

******************************************
	good_boy = True  # мальчик-то неплохой

	if not good_boy:
		print('Этот в грязь полез')
		print('и рад,')
		print('что грязна рубаха.')
		print('Про такого говорят:')
		print('он плохой, неряха.')
	else:
		print('Этот чистит валенки,')
		print('моет сам галоши.')
		print('Он хотя и маленький,')
		print('но вполне хороший.')
******************************************

Задача 2/2:

Готовим завтрак. Можно приготовить хлопья с молоком (молоко, хлопья),
можно яичницу (яйца), а можно омлет (молоко и яйца). Есть и более бюджетные
варианты.

Вставьте логический оператор вместо многоточия и потестируйте.

Подсказка:

Если поставить оператор "ИЛИ" — первая часть кода отработает даже в том случае,
если у нас есть только хлопья: «есть молоко ИЛИ хлопья ИЛИ яйца». Не годится:
вариант для сухих хлопьев у нас во второй части кода, в блоке else.

******************************************
	milk = True
	cereals = False
	eggs = not False

	if milk and (cereals or eggs):
		if eggs:
			if milk:
				breakfast = '- омлет'
			else:
				breakfast = '- яичница'
		else:
			breakfast = '- хлопья с молоком'
	else:
		if milk:
			breakfast = '- стакан молока'
		elif cereals:
			breakfast = 'можно погрызть сухих хлопьев'
		else:
			breakfast = 'ничего не будет: разгрузочный день'

	print('Сегодня на завтрак', breakfast)
******************************************
===============================================================================
