Циклы

В обычной жизни зачастую приходится выполнять серии одинаковых операций.

Например, задача «перемыть эту груду грязных тарелок» решается так:
взять тарелку — помыть — сполоснуть — вытереть — убрать — взять следующую
тарелку — помыть — ...и повторять по кругу.

Этот процесс не бесконечен: работа должна продолжаться лишь при условии,
что остались грязные тарелки. Тарелки кончились — работа прекращается.

В разработке иногда тоже требуется повторять определённый набор действий до
тех пор, пока выполняется какое-то заданное условие.
Возьмём, для примера, список всемирно известных бременских музыкантов.

	bremen_musicians = ['Кот', 'Пёс', 'Трубадур', 'Осёл', 'Петух'] 

На афише необходимо напечатать имена всех музыкантов, вот таким образом:

	Кот
	Пёс
	Трубадур
	Осёл
	Петух 

Как это сделать в Python? Можно вручную прописать вывод каждого элемента:

	print(bremen_musicians[0])
	print(bremen_musicians[1])
	... 

Придётся пять раз писать один и тот же код. А если в списке не скромная
рок-группа, а симфонический оркестр и академический хор в придачу?

Задача — точно как с тарелками: нужно взять первый элемент списка
bremen_musicians, напечатать через print(), потом взять следующий
элемент... и продолжать работу до тех пор, пока не будет обработан
последний элемент списка.

Для выполнения таких операций придумали циклы — программные конструкции,
выполняющие определённые действия до тех пор, пока выполняется заданное условие.

Как это пишется

Объявление цикла

Чтобы программа поняла, что сейчас начнётся цикл — нужно сообщить ей об
этом специальными словами: объявить цикл.

Цикл в Python объявляется ключевыми словами for и in, после них задаётся
условие цикла. После условия ставится двоеточие. 

	for переменная in список_элементов: # Вот оно, условие цикла 

В условии цикла после for указывают имя переменной, в которую будут поочерёдно
передаваться элементы из обрабатываемого списка, а после in ставится имя списка,
который надо обработать.

Продолжая метафору, «список элементов» — это груда немытых тарелок, а «переменная,
объявленная в условии цикла» — это руки, в которые поочерёдно попадает по одной
тарелке из груды.

Цикл автоматически прекратит работу, когда переберёт все элементы списка.

Имя переменной в цикле вы можете дать любое, но традиционно эти имена образуют
от имени обрабатываемого списка, в единственном числе. Например, если список
называется musicians, то переменную лучше назвать musician; если список
называется pigs — переменную называют pig.

Тело цикла

За условием с новой строки следует тело цикла. Каждая строка тела цикла
отбивается от начала строки четырьмя пробелами:

	for переменная in список_элементов:
		# Тут тело цикла: код, который выполняется для каждого элемента
		# Здесь можно обработать переменную, объявленную в условии цикла,
		# например, напечатать её значение: print(переменная) 

Теперь можно написать цикл, который автоматически напечатает имена всех этих
хиппи из команды «Бременские музыканты».

	bremen_musicians = ['Кот', 'Пёс', 'Трубадур', 'Осёл', 'Петух']

	for musician in bremen_musicians:
		# Каждый элемент списка bremen_musicians 
		# по очереди будет передан в переменную musician
		# и напечатан
		print(musician)

	# Здесь может быть какой-то код, который выполнится
	# только после того, как цикл закончит работу 

Цикл берёт значение первого элемента из списка bremen_musicians и передаёт его
в переменную musician. Затем выполняется код в теле цикла: печатается содержимое
переменной musician.

После этого начнётся новый «круг», со следующим элементом списка. И так будет
продолжаться до тех пор, пока цикл не переберёт весь список.

Каждый такой «круг» называется итерацией цикла.

Когда список закончится — программа выйдет из цикла; после этого сработает код,
который написан после цикла.

Пуск!

Запустите код и посмотрите на результат выполнения. Добавьте в список несколько
новых музыкантов (Атаманша из сказки вполне может быть на бэк-вокале) и запустите
код заново.

	bremen_musicians = ['Кот', 'Пёс', 'Трубадур', 'Осёл', 'Петух']
	# Код цикла
	for musician in bremen_musicians:
		# Каждый элемент списка bremen_musicians 
		# по очереди будет передан в переменную musician
		# и напечатан
		print(musician)
	​
	# Код, который выполняется после цикла
	print('Нам дворцов заманчивые своды не заменят никогда свободы!')

	Результат

	Кот
	Пёс
	Трубадур
	Осёл
	Петух
	Нам дворцов заманчивые своды не заменят никогда свободы!

Замените имя переменной musician на какое-нибудь собственное название:
ничего не сломается (конечно, заменить название переменной надо не только
в условии, но и в функции print()).

Цикл бегает по кругу, пока не переберёт все элементы списка. После этого
выполнится код, печатающий строку из песни.

Четыре отступа перед вложенным кодом

Код, который размещён в теле цикла, отбивается от начала строки четырьмя
отступами. По этим отступам Python определяет, где начинается и кончается код,
относящийся к телу цикла.

Это строгое техническое условие: без отступов в блоках кода программа просто
не заработает.

Чтобы вам было удобнее решать задачи - мы подготовили шпаргалку.
Откройте ее в соседнем окошке или распечатайте и держите под рукой.

Задача 1

Напечатайте с помощью цикла названия месяцев из списка months. 

	months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']

	for month in months:
		print(month)

	Результат

	Январь
	Февраль
	Март
	Апрель
	Май
	Июнь
	Июль
	Август
	Сентябрь
	Октябрь
	Ноябрь
	Декабрь

Задача 2

Напечатайте приглашение на обед: циклом выведите имена приглашённых из списка pigs.

Опишите условие и тело цикла — и всё заработает.

	pigs = ['Ниф-Ниф', 'Наф-Наф', 'Нуф-Нуф']
	print('Дорогие свиньи!')

	for pig in pigs:
		print(pig)

	print('приглашаю вас на ужин!')
	print('Любящий вас Волк.')

	Результат

	Дорогие свиньи!
	Ниф-Ниф
	Наф-Наф
	Нуф-Нуф
	приглашаю вас на ужин!
	Любящий вас Волк.
