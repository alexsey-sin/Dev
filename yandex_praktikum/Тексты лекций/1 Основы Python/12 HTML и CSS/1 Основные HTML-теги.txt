Основные HTML-теги

В ответ на запрос проект возвращает текст, текст отображается в браузере — это
здорово! Но на коммерческий проект такая страница не тянет. Пользователь хочет
видеть хороший дизайн, читаемый текст и красивые картинки.

Для оформления веб-страниц был придуман программный язык HTML. Сервер возвращает
текст в формате HTML, а браузер превращает HTML-разметку в видимое форматирование
текста.

Содержимое страницы размечается HTML-тегами, специальными метками. Они указывают
браузеру, как интерпретировать содержимое, размещённое между ними. Теги определяют
вид, положение, поведение и многие другие свойства элементов на странице. В коде
страницы теги замыкаются в треугольные скобки.

Теги бывают парные и одиночные. Парные состоят из «двух частей», у них есть 
открывающий тег <имя_тега> и закрывающий </имя_тега> (в закрывающем теге перед
именем ставится слеш /); двойные теги влияют на отображение того текста, который
размещён между ними: <имя_тега>Этот текст будет как-то изменён</имя_тега>.

У одиночных тегов нет закрывающей части: например, <br> просто прерывает строку,
и закрывающий тег ему не нужен.

Вспомнить всё

Вот небольшой фрагмент HTML-кода:

	<h1>Смотри-ка, это не просто текст, а заголовок! (h - header)</h1>
	<h3>А это заголовок помельче, третьего уровня</h3>
	<p>А вот просто абзац (p - paragraph) текста</p>
	<p>Абзацы отделяются друг от друга.</p>
	А текст без HTML-форматирования,
	даже
	если
	он
	разбит
	по строкам
	— слипнется в одну линию

Браузер преобразует этот код — изменит отображение текста, замкнутого между
открывающими и закрывающими тегами:

скрин_1.jpg

Откуда что берётся

Разработкой внешнего вида страниц занимаются специально обученные люди-дизайнеры.
Обычно результатом их работы бывает одно или несколько изображений веб-страницы.

Потом «фронтендеры» (специалисты, занимающиеся созданием видимых пользователю
страниц) превращают статичную картинку в интерактивную веб-страницу, пишут
(«верстают») страницу на языке HTML.

Бэкенд-разработчик тоже должен должен понимать вёрстку: часто требуется сверстать
прототип проекта, разбить HTML-шаблон на составные части или изменить существующий
HTML-код.

Идейно вёрстка состоит из двух частей: разметка страницы на HTML и работа со
стилями в CSS.

Начнём с HTML.

HTML — это HyperText Markup Language, «язык гипертекстовой разметки». Этот язык
появился в 1991 году, а сейчас применяется уже пятая его версия, HTML5. Кстати,
первый сайт, написанный на HTML, всё ещё жив и доступен.
Заголовки: <h1>, <h2>, <h3>
В HTML есть шесть тегов, определяющих заголовки в тексте: h1, h2, h3, h4, h5, h6
(от англ. header, «заголовок»). Заголовок первого уровня, h1, — самый крупный;
заголовок шестого уровня — самый мелкий. На практике обычно хватает заголовков
h1, h2 и h3. При отображении на странице текст заголовков будет отображён
увеличенным полужирным шрифтом.

	<h1>Заголовок страницы</h1>
	<h2>Заголовок подраздела страницы</h2>
	<h3>Заголовок подраздела подраздела страницы</h3> 

Абзац: <p>

При публикации текст делят на абзацы. В HTML абзацы выделяют тегом <p>
(от англ. paragraph, «абзац»). Это парный тег: текст абзаца замыкается между
открывающим и закрывающим тегами. Текст, замкнутый в тег <p>, будет отделён
отступами от окружающего содержимого страницы.

	<p>The quick brown fox jumps over the lazy dog</p>
	<p>Чушь: гид вёз кэб цапф, юный жмот съел хрящ.</p> 

Комментарий: <!-- -->

Бывает так, что нужно оставить в HTML-коде подсказку для себя и для других
разработчиков, но не показывать её пользователям. В HTML (как и в других языках
программирования) есть возможность комментирования кода. Тег комментария выглядит
так:

	<!-- Вася! Здесь ничего не трогай, а то сломается! --> 

Комментарий может быть и многострочный:

	<!-- Вася! 
	Здесь ничего не трогай, 
	а то сломается! --> 

Ссылка: <a>

Именно ссылки отличают HTML от простого форматированного текста. Ссылка в
HTML-документе обозначается парным тегом <a></a> (от англ. anchor, «якорь»).
Между открывающим и закрывающим тегами ставится текст ссылки — тот текст, по
которому пользователь может кликнуть для перехода на другую веб-страницу. На
веб-странице ссылка будет подчёркнута и выделена цветом.

Помимо текста ссылки в теге <a> нужно указать URL, на который ведёт эта ссылка.

Дополнительную информацию описывают в атрибутах тегов (от лат. attributus,
«приданный»). Некоторые атрибуты универсальны, другие могут применяться лишь
в определённых тегах.

Атрибуты:

    пишутся в открывающем теге;
    атрибутов может быть несколько;
    друг от друга атрибуты отделяются пробелом;
    порядок атрибутов в теге значения не имеет.

По кодстайлу Яндекс.Практикума значение атрибута нужно указывать в двойных
кавычках. Технически код будет работать и с одинарными, но ревьюер такой код
не пропустит.

В общем случае атрибуты в тегах записываются так:

	<имя_тега имя_атрибута="значение_атрибута">Содержимое тега</имя_тега>
	<!-- В теге может быть и несколько атрибутов -->
	<имя_тега атрибут1="значение_атрибута1" атрибут2="значение_атрибута2">
	  Содержимое тега
	</имя_тега> 

Адрес ссылки указывают в атрибуте с именем href (от англ. hypertext reference,
«гипертекстовая ссылка»).

Вот как это выглядит в коде:

	<!-- Клик по тексту ссылки «Начать учиться» 
	отправит пользователя на один известный сайт -->
	<a href="https://praktikum.yandex.ru/profile/backend-developer/">
	  Начать учиться
	</a>
	```
	![image](https://pictures.s3.yandex.net:443/resources/S3.2_03_02_1621935694.png)
		
	Без атрибута `href` ссылка работать не будет, ведь без него непонятно, куда делать переход. 

	Кроме обязательного `href` ссылка может иметь атрибут `target` (от англ. «цель»). Этот атрибут «нацеливает» браузер, предписывая, где открыть ссылку:

	- ссылка без атрибута `target` или с атрибутом `target="_self"` откроет целевую страницу в той же вкладке, заменив текущую страницу новой;
	- ссылка с атрибутом `target="_blank"` откроет для целевой страницы новую вкладку в браузере.

	При отладке кода можно оставлять ссылки пустыми, не указывая URL: `<a href="">Пустая ссылка</a>` — в таком случае ссылка будет отображаться подчёркнутой и реагировать на наведение курсора, но клик по ней ничего не даст.
		
	## Изображение: <img>

	Принципиальное отличие тега `<img>` от всех предыдущих тегов в том, что с его помощью в тело страницы встраивается сторонний файл.

	У любого файла в интернете есть адрес, любой файл в сети где-то хранится. Веб-адрес (путь к файлу-картинке) указывается в атрибуте `src` (от англ. *source,* «источник»).
		
	```html
	<img src="веб_адрес_картинки_которую_надо_встроить_в_страницу">

Картинка не обязательно должна храниться на вашем сервере — вы можете встроить
в свою страницу любую картинку, доступную в интернете. Но если владелец картинки
удалит её со своего сервера, то на вашей странице вместо картинки будет дыра.

Изображение встраивается в HTML-страницу одиночным тегом, закрывающего у <img> нет:
какой смысл сообщать браузеру, где заканчивается картинка, если она имеет
определённые размеры?

скрин_2.jpg

Вложенность тегов
Теги можно вкладывать один в другой. Например, такой код разместит ссылку внутри
абзаца:

	<p>
	  Абзац. Просто абзац. 
	  <a href="">
		Пустая ссылка.
	  </a>
	  Конец абзаца.
	</p>
	<p>
	  Другой абзац.
	</p> 

Для структурирования кода в HTML-шаблонах вложенные теги отбивают отступом в два
пробела. Пробелы (больше двух) и переносы строк в исходном коде игнорируются
браузером при отображении страницы.

Начертание шрифта и перенос строки

Придать шрифту полужирное начертание можно тегом <b></b> (от англ. bold),
а тег <i></i> (от англ. italic) выделит текст курсивом.

Обычно текст в браузере стремится вытянуться в одну строку и занять всю доступную
ширину, но это не всегда хорошо. Для принудительного переноса строки есть одиночный
тег <br> (от англ. break row, «разрыв строки»).

Например, код:

	<p>
	  Вот сейчас моё <b>сердце</b> расплавится,<br>Я почти <i>итальянец</i>…
	</p> 

отобразится в браузере так:

скрин_3.jpg

Маркированный и нумерованный списки: <ul> и <ol>

Однотипные элементы удобно располагать в списках; в HTML предусмотрено и такое
форматирование.

Структура HTML-списка немного сложнее предыдущих тегов: она двухуровневая.

Тегом <ul></ul> определяются начало и конец списка (ul от англ. unordered list,
«неупорядоченный список», иначе его называют «маркированным»), а в этот тег
вкладываются элементы списка <li></li> (от англ. list item, «пункт списка»).

Вот так выглядит маркированный список в HTML:

	<ul>
	  <li>Диван,</li>
	  <li>Чемодан,</li>
	  <li>Саквояж,</li>
	  <li>Картина,</li>
	  <li>Корзина,</li>
	  <li>Картонка</li>
	  <li>И маленькая собачонка</li>
	</ul> 

В браузере этот код отобразится так:

скрин_4.jpg

Список с точками-буллитами лёгким движением можно превратить в нумерованный
список: для этого тег списка <ul></ul> надо заменить на тег <ol></ol>
(от англ. ordered list, «упорядоченный список»). А пункты в нумерованном
списке определяются теми же тегами, что и в неупорядоченном: <li></li>.

<ol>
  <li>Диван,</li>
  <li>Чемодан,</li>
  <li>Саквояж,</li>
  <li>Картина,</li>
  <li>Корзина,</li>
  <li>Картонка</li>
  <li>И маленькая собачонка</li>
</ol> 

В результате получим нумерованную опись багажа:

скрин_5.jpg

Тег <div>: объединить код в блок

<div> </div> (от англ. division, «отдел») применяется для того, чтобы
сгруппировать фрагменты кода воедино и придать этим группам определённые
свойства: положение на странице, цвет фона, размер шрифта — можно даже
перевернуть такой блок вверх ногами.

Свойства для элементов div описываются с помощью стилей CSS: div без стилей
никак не изменяет вид содержимого.

Хит-парад ошибок

1-е место: закрыть вложенный тег снаружи вмещающего

Вложенность тегов в HTML может быть очень глубокой, и одна из самых популярных
ошибок — закрыть вложенный тег снаружи вмещающего. Например, вот так:

	<p>
	  Абзац. Просто абзац. 
	  <a href=""> <!-- Открывающий тег ссылки — внутри тега <p> -->
		Пустая ссылка.  
	  Конец абзаца.
	</p>
	</a> <!-- ...а закрывающий тег ссылки оказался после закрывающего </p> --> 

Браузер в изумлении — он не видит, где заканчивается ссылка, и сделает ссылкой
весь текст абзаца:

скрин_6.jpg

)
Правим код. Закрываем тег <a> внутри того тега, в котором он был открыт:

	<p>
	  Абзац. Просто абзац. 
	  <a href=""> <!-- Открывающий тег ссылки — внутри тега <p> -->
		Пустая ссылка.
	  </a> <!-- Поставили закрывающий тег ссылки внутрь тега <p> -->
	  Конец абзаца.
	</p> 

Вот теперь порядок:

скрин_7.jpg

2-е место: не закрыть парный тег

Парные теги нужно обязательно закрывать. В ином случае браузер не поймёт,
где кончается элемент и решит, что весь последующий код вложен в этот тег.

Добавим в код заголовок:

	<h1>Заголовок
	<p>
	  Абзац. Просто абзац. 
	  <a href="">
		Пустая ссылка.
	  </a>
	  Конец абзаца.
	</p> 

Открываем страницу — а там:

скрин_8.jpg

Весь текст стал огромным. Браузер не нашёл закрывающего тега </h1> и решил,
что весь текст — это заголовок, и отобразил его крупным шрифтом.

Надо чинить. Добавим закрывающий тег для заголовка:

	<h1>Заголовок</h1> <!-- Добавили закрывающий тег: </h1> -->
	<p>
	  Абзац. Просто абзац. 
	  <a href="">
		Пустая ссылка.
	  </a>
	  Конец абзаца.
	</p> 

Так-то лучше:

скрин_9.jpg

Начало положено

Этих тегов вполне хватит для начала работы с разметкой веб-страниц. Чуть позже
мы добавим в арсенал ещё несколько востребованных тегов.

Вообще говоря, в стандарте HTML5 больше сотни тегов. Но перед бэкендером
не стоит задача стать верстальщиком, так что будем пополнять знания по мере
практической необходимости.

Зачем это всё?

View-функции в вашем проекте Yatube умеют возвращать текстовую строку в ответ
на запрос. Самый простой способ увидеть, кому и зачем нужен HTML — добавить в
эти строки HTML-разметку и посмотреть, как изменится внешний вид страницы:
теперь ваш проект может отдавать текст с форматированием!

Например, view-функция для главной страницы может выглядеть так:

	def index(request):
		return HttpResponse(
			'Ты <i>не можешь</i> получить правильные <b>ответы</b>,<br> '
			'если у тебя нет правильных <s>вопросов</s> запросов.'
		) 
