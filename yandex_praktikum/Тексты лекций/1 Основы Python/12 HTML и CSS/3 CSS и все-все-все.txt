CSS и все-все-все

Чтобы задать элементам страницы размер, цвет, стиль шрифта, отступы элементов
друг от друга или даже поведение при наведении мышки — используют стили CSS
(Cascading Style Sheets, англ. «каскадные таблицы стилей») — язык,
предназначенный для оформления HTML-страниц.

В зависимости от стилей один и тот же HTML-код может выглядеть по-разному.

	<div>Принцесса была прекрасная</div>
	<div>Погода была ужасная</div> 

«Голый» HTML-код отобразится в браузере примерно так:

скрин_16.jpg

С помощью CSS можно превратить этот код во что-нибудь более нарядное,
описав свойства элемента div в стилях:

скрин_17.jpg

Inline-стили в HTML

Напишем фрагмент кода: в шапку сайта header разместим блок для навигации по
сайту nav, в него поместим список ul, а в каждом пункте списка будет ссылка
на определённую страницу сайта.

	...
	<header>
	  <nav>
		 <ul>
		   <li>
			 <a href="/">Главная страница</a>
		   </li>
		   <li>
			 <a href="about/">О сайте</a>
		   </li>
		 </ul>
	   </nav>
	</header>
	... 

Этот код будет прекрасно работать, а в браузере он будет отображён примерно так:

скрин_18.jpg

Заказчик посмотрел вёрстку и написал комментарий (стилистика оригинала сохранена):

Хочу красный фон для навигации; пункт меню той страницы, где находится пользователь,
пусть будет белым, и чтобы все пункты меню размещались в строку, горизонтально.
А ещё поиграйте со шрифтами — увеличьте размер и уберите засечки на буквах.

Вообще-то так не бывает: дизайн утверждается заранее, на картинках-макетах,
а решают эти вопросы менеджер и дизайнер. Тем не менее — выполним задание.

Самый простой вариант выполнить хотелки и желалки заказчика — изменить вид
элементов с помощью CSS.

Описать стили элементов можно прямо в HTML-коде: любому элементу можно добавить
атрибут style.

Такой способ добавления стилей называется inline (англ. «в линию», со смыслом
«прямо в HTML-коде»).

Такое размещение стилей удобно лишь при обучении, а на практике этот способ
весьма порицается. На первый взгляд — всё работает. Но когда в проекте будет
много элементов и нужно будет поменять их стили — начнутся проблемы.

Стили в атрибут style записывают так:

style="свойство: значение; другое_свойство: значение;"

	...
	<header>
	  <nav style="background: red;"> <!-- Красный фон для элемента nav -->
		<ul>
		  <!-- Отобразить элемент в строку; установить размер шрифта в 20px; применить шрифт без отсечек -->
		  <li style="display: inline-block; font-size: 20px; font-family: sans-serif;">
			<a href="/" style="color: white;">Главная страница</a> <!-- Шрифт покрасить в белый; -->
		  </li>
		  <!-- Отобразить элемент в строку; установить размер шрифта в 20px; применить шрифт без отсечек -->
		  <li style="display: inline-block; font-size: 20px; font-family: sans-serif;">
			<a href="about/">О сайте</a>
		  </li>
		</ul>
	  </nav>
	</header>
	...

Эти стили изменят вид навигации:

скрин_19.jpg

Готово!

Что описано в приведённом коде:

    в nav добавлен стиль, объявляющий красный цвет фона: background: red;
    ко всем элементам li добавился стиль, описывающий
        отображение элементов — в линию: display: inline-block;
        тип шрифта — любой шрифт без засечек: font-family: sans-serif;
        размер шрифта: font-size: 20px;
    текст в первой ссылке перекрашен в белый цвет: color: white;

В CSS предусмотрены сотни стилей для самых различных свойств элементов.
Основные CSS-свойства вы узнаете и запомните в процессе ежедневной работы,
а с остальными вам помогут справочники.

Стили — отдельно, HTML — отдельно

Хорошей практикой считается убрать описание стилей из тегов, отделить
код CSS от HTML. Код станет универсальнее, компактнее — и ещё на шаг
приблизится реализации принципа DRY — «не повторяйся».

Правила CSS можно вынести в блок <head>, обернув их в парный тег <style>.
Для того чтобы браузер понял, какое правило к какому элементу относится,
— перед правилами указывают селектор нужного элемента, а правила обрамляют
фигурными скобками:

	<head>
	  ...
	  <style>    
		body {
		  background: blue;
		}
	  </style>
	</head> 

Селекторы

Селектор — это «имя» одного или нескольких элементов на странице, способ
выбрать (англ. select, «выбирать») среди всех элементов страницы те,
к которым нужно применить определённые стили.

В самом простом случае селектором может служить имя тега.

	<head>
	  <title>Дама сдавала багаж | С.Маршак</title>
	  <style>
		<!-- Ниже описано правило background: blue, 
		которое будет применено к тегу body.
		Фон всей страницы станет голубым -->
		body {
		  background: blue;
		}
	  </style>
	</head>
	<body>
	  <header>
		<nav>
		  <ul>
			<li> 
			  <a href="/">Главная страница</a>
			</li>
			<li>
			  <a href="about/">О сайте</a>
			</li>
		  </ul>
		</nav>
	  </header>
	  <main>
		Дама сдавала багаж:
		<ul>      
		  <li>Диван,</li>
		  <li>Чемодан,</li>
		  <li>Саквояж...</li>
		</ul>
	  </main>
	</body>

С <body> всё просто: на странице может быть лишь один элемент с таким именем,
и правило будет применено без ошибки. А как быть с элементом li или со ссылкой?
Ведь таких элементов на странице может быть много, а правила надо применять
выборочно, лишь к некоторым из них.

Если в приведённом коде указать стили для элемента li — то эти стили применятся
не только для li в nav, но и для аналогичных элементов, размещённых в main,
а этого нам не нужно.

Решение есть.

Селектор по классу: атрибут class

Для большей гибкости элементу можно дать дополнительный признак: добавить ему
атрибут class, своего рода «имя», по которому можно будет обратиться к этому
элементу. Атрибут class можно присвоить любому элементу в HTML; значение этого
атрибута не обязано быть уникальным: на странице может быть сколько угодно
элементов с одинаковым классом.

Значений у атрибута class может быть несколько, значения разделяются пробелом.
Имена классам придумывает разработчик.

	<ul>
	  <!-- У атрибута class два значения: nav-item и active -->
	  <li class="nav-item active"> 
		<a href="/">Главная страница</a>
	  </li>
	  <!-- Здесь для li указан class nav-item, как и у предыдущего li -->
	  <li class="nav-item">
		<a href="about/">О сайте</a>
	  </li>
	</ul> 

Теперь имена классов можно использовать как селекторы: можно обратиться к
элементам по имени классов, даже не указывая название тега.

Чтобы браузер понял, что нужно искать по классу, в описании стилей перед
именем класса ставится точка.

	<head>
	  <title>Дама сдавала багаж | С.Маршак</title>
	  <style>
		<!-- Правила, перечисленные в фигурных скобках после имени класса,
		будут применены ко всем элементам с классом nav-item -->
		.nav-item {
		  display: inline-block; 
		  font-size: 20px; 
		  font-family: sans-serif;
		}
	  </style>
	</head>
	<!-- Стили будут применены лишь к элементам с классом .nav-item -->
	<body>
	  <header>
		<nav>
		  <ul>
			<!-- К этому элементу применятся правила, описанные для .nav-item -->
			<li class="nav-item active"> 
			  <a href="/">Главная страница</a>
			</li>
			<!-- И к этому элементу применятся правила, описанные для .nav-item -->
			<li class="nav-item">
			  <a href="about/">О сайте</a>
			</li>
		  </ul>
		</nav>
	  </header>
	  <main>
		Дама сдавала багаж:
		<ul>      
		  <li>Диван,</li>
		  <li>Чемодан,</li>
		  <li>Саквояж...</li>
		</ul>
	  </main>
	</body>

Таким образом можно написать правило один раз — и применить его для любого
количества элементов в HTML-коде: надо просто указать этим элементам
одинаковые имена классов.

Селектор по идентификатору: атрибут id

Аналогично атрибуту class работает и атрибут id. Разница между ними в том,
что в пределах одной HTML-страницы может быть множество элементов с одинаковым
классом, а вот каждый id должен быть уникален: на одной странице не должно
быть двух или более элементов с одинаковым значением атрибута id.

В остальном — всё точно так же, как и с атрибутом class: атрибут id может
быть присвоен любому элементу; названия для id придумывает разработчик.

Элементу с определённым id можно присвоить стили; в описании стилей перед
id ставится символ #.

	<head>
	  <title>Дама сдавала багаж | С.Маршак</title>
	  <style>
		.nav-item {
		  display: inline-block; 
		  font-size: 20px; 
		  font-family: sans-serif;
		}
		<!-- Описываем правила для элемента с id="top-nav" -->
		#top-nav {
		  background: red;
		}
	  </style>
	</head>
	<body>
	  <header>
		<!-- К этому элементу будут применены правила, 
		описанные в стилях после селектора #top-nav -->
		<nav id="top-nav">
		  <ul>        
			<li class="nav-item active"> 
			  <a href="/">Главная страница</a>
			</li>
			<li class="nav-item">
			  <a href="about/">О сайте</a>
			</li>
		  </ul>
		</nav>
	  </header>
	  <main>
		Дама сдавала багаж:
		<ul>      
		  <li>Диван,</li>
		  <li>Чемодан,</li>
		  <li>Саквояж...</li>
		</ul>
	  </main>
	</body>

Имена классов и id принято писать строчными буквами, разделяя слова в названии
дефисом или нижним подчёркиванием.

Есть много разных соглашений о том, как выбирать названия для классов и ID,
какой тип разделителя и в каких случаях применять. В нашем курсе разделять
слова в именах мы будем с помощью дефиса -, а названия классам и ID будем
давать, исходя из значения элемента.

Самые распространённые селекторы:

название селектора	пример	что выбирает
Селектор по тегу	li		все элементы li
Селектор по индексу	#top-nav	элемент с id="top-nav"
Селектор по классу	.negative	все элементы с class="negative"
Универсальный селектор *		Универсальный селектор *	все без исключения элементы
Список селекторов	ul, ol	все элементы ul и ol

Составные селекторы

Селекторы можно комбинировать. Например, можно выбирать только элементы,
находящиеся внутри указанного элемента. Например, составной селектор даст
обратиться к ссылке, размещённой в элементе li:

	li a {
		  color: white;
		} 

Такой стиль перекрасит текст ссылок, вложенных в <li>, в белый цвет.
А к остальным ссылкам это правило применено не будет.

Подобным образом можно работать и с селектором по классу:

	<style>
	.nav-item {
		display: inline-block;
		font-size: 20px;
		font-family: sans-serif;
	  }
	  <!-- В белый цвет будут перекрашены все ссылки, 
	  расположенные внутри любого элемента с классом active -->
	  .active a {
		color: white;
	  }
	</style>
	...
	<ul>
	  <li class="nav-item active"> 
		<!-- К этой ссылке будут применены CSS-правила из блока .active a -->
		<a href="/">Главная страница</a>
	  </li>
	  <li class="nav-item">
		<a href="about/">О сайте</a>
	  </li>
	</ul>

Для составных селекторов есть несколько разных вариантов синтаксиса:

пример				что выбирает
header *			все элементы внутри header
p.negative			элементы p с class="negative"
div#footer-inner	элементы div с id="footer-inner"

Для составных селекторов возможны любые комбинации. Например, стиль

p li a.active {font-size: 50px;} установит размер шрифта в 50px ссылке
с классом active, вложенной в элемент li, который вложен в элемент p.

Вот как может выглядеть на практике полный код страницы со стилями:

	<!DOCTYPE html>
	<html lang="ru">
	<head>
	  <title>Дама сдавала багаж | С.Маршак</title>
	  <style>
		body {
		  background: blue;
		}
		footer, #top-nav {
		  background: red;
		}
		.nav-item {
		  display: inline-block;
		  font-size: 20px;
		  font-family: sans-serif;
		}
		.active a {
		  color: white;
		}
		.negative {
		  color: white;
		  background: black;
		}
		#footer-inner {
		  font-size: 30px;
		}
	  </style>
	</head>
	<body>
	  <header>
		<nav id="top-nav">
		  <ul>
			<li class="nav-item active">
			  <a href="/">Главная страница</a>
			</li>
			<li class="nav-item">
			  <a href="about/">О сайте</a>
			</li>
		  </ul>
		</nav>
	  </header>
	  <main>
		<p class="negative">
		  Дама сдавала багаж:
		</p>
		<ul>
		  <li>Диван,</li>
		  <li>Чемодан,</li>
		  <li>Саквояж...</li>
		</ul>
	  </main>
	  <footer>
		<div id="footer-inner">
		  Текст в подвале
		</div>
	  </footer>
	</body>

Скачайте файл и откройте его в браузере. Прекрасный изысканный дизайн!

index.html
(https://code.s3.yandex.net/backend-developer/learning-materials/index.html)

Попробуйте сделать лучше, поиграйте с цветами и шрифтами: ведь каждый
бэкендер — дизайнер в душе.

Получилось? Отлично! Работаем дальше.

Отдельный файл для css

Как правило, проект состоит из нескольких страниц с одинаковыми стилями.
Вместо того чтобы писать стили для каждой страницы отдельно — можно написать
коллекцию стилей для всего сайта.

Стили можно перенести в отдельный файл, этот файл подключать к HTML-страницам
— и CSS-правила будут работать на всех этих страницах. DRY в квадрате!

Стили хранят в файлах с расширением .css и размещают в директории /css
(стилевых файлов в проекте может быть несколько, их удобнее держать вместе).

Структура файлов:

	lets-play-the-game
	├── css  
	│    └── style.css
	└── index.html 

Стилевой файл подключают в head по ссылке:

	<!DOCTYPE html>
	<html>
	  <head>
	   <!-- Подключаем стилевой файл -->
	   <link rel="stylesheet" href="css/style.css">
	  </head>
	  <body>
		<!-- Тут код страницы -->
	  </body>
	</html> 

В файле .css теги <style> не нужны: по расширению файла браузер и без подсказок
поймёт, что это стили.

Содержимое файла style.css в нашем примере будет таким:

	body {
	  background: blue;
	}
	footer, #top-nav {
	  background: red;
	}
	.nav-item {
	  display: inline-block;
	  font-size: 20px;
	  font-family: sans-serif;
	}
	.active a {
	  color: white;
	}
	.negative {
	  color: white;
	  background: black;
	}
	#footer-inner {
	  font-size: 30px;
	}

Другие CSS-свойства и селекторы

Работа с CSS, сложные селекторы и полный список свойств — тема для отдельного
большого курса. Backend-разработчику необязательно профессионально верстать,
но при необходимости найти в сети описания доступных CSS-свойств и селекторов
будет несложно.

Например, свойства — в этом справочнике Mozill'ы.
(https://developer.mozilla.org/ru/docs/Web/CSS/Reference)

И селекторы — тоже у Mozilla.
(https://developer.mozilla.org/ru/docs/Web/CSS/Reference#selectors)

Важно понять принципы, а не заучивать правила: вряд ли кто из бэкендеров знает
наизусть все CSS-свойства.

Для работы с проектом Yatube вам будут доступны или готовые HTML- и CSS-файлы,
или подробные объяснения с примерами.

Задание.

Чтобы дополнительно разобраться селекторами, пройдите игру
(https://flukeout.github.io/)
до 10-го уровня и вам многое откроется.

Если получится — напишите в чат когорты Кажется, я знаю селекторы! и помогите
остальным.

