Models: почти база данных

Вы уже вывели и отредактировали текст на странице icecream/. Это прекрасно,
но можно лучше. Помимо строки текста в проекте должно быть много информации:
список мороженого и список друзей с городами их проживания; хранить это всё
во view-функциях будет неудобно.

Обычно всю информацию хранят в базах данных, но в проекте Anfisa4friends будет
достаточно списков и словарей.

Для хранения данных в проекте создан список icecream_db, каждый элемент которого
содержит информацию об одном сорте мороженого.

Каждый сорт описывается двумя отдельными фрагментами текста: названием и
описанием. Обойтись обычным списком не удастся, так что в каждый элемент списка
вложен словарь с ключами name и description, а значениями этих ключей как раз
и будет информация о конкретном сорте.

Красивый код: максимальная длина строки

В коде не принято делать слишком длинные строки: с ними неудобно работать.
Правила хорошего тона (соглашение PEP8)(https://pep8.ru/doc/pep8/) рекомендуют
ограничивать строки кода в Python 79-ю символами, а длину строк комментариев
— 72-я символами.

Вся разбиваемая строка замыкается в общие скобки, в каждой строке фрагмент
текста обрамляется в кавычки, перенос строки делается только после пробела
(новая строка не должна начинаться с пробела), отступы соблюдаются в каждой строке.

Соблюдать несложно, читать удобно. Длинная строчка тоже будет работать без проблем,
но это неприлично.

	#  Как бы база данных
	#  name (англ. 'имя') - название мороженого
	#  description (англ. 'описание') - описание мороженого

	icecream_db = [
		{
		'name': 'Золотое мороженое',
		'description': ('Шарики таитянского ванильного мороженого, шоколад '
						'"Amedei Porcelana" и груда экзотических фруктов.'
						'Всё это покрыто золотой фольгой, '
						'её тоже полагается съесть.'),
		},    
		{
		'name': 'Готическое мороженое',
		'description': ('Чёрное мороженое в чёрном вафельном рожке для '
						'true black goths. Состав: сливочное мороженое, '
						'миндаль, активированный уголь, чернота, мрак, '
						'отрицание.'),
		},
		{
		'name': 'Мороженое паста карбонара',
		'description': ('Порция макарон под тёмным соусом. '
						'Паста — из ванильного мороженого, '
						'продавленного через пресс с дырочками, '
						'соус — ликёр с орехами. Buon appetito!'),
		},
		{
		'name': 'Фруктово-ягодное мороженое ГОСТ 119-52',
		'description': ('Сырьё: сливки, пахта, фрукты и ягоды в свежем виде, '
						'яичный порошок из куриных яиц, патока карамельная. '
						'Общее количество микробов в 1 мл мороженого: '
						'не более 250 тыс.'),
		},
		{
		'name': 'Люминесцентное мороженое',
		'description': ('Сливочное мороженое с белками, '
						'активированными кальцием. '
						'Светится, если облизнуть. '
						'Можно подавать в тыкве на Хэллоуин '
						'или кормить собаку Баскервилей.'),
		},
		{
		'name': 'Жареное мороженое',
		'description': ('Шарики мороженого обваливают в яйце и в панировке, '
						'сильно замораживают и быстро обжаривают '
						'в растительном масле. Едят быстро.'),
		},
	]

	# информацию из списков получают по индексу, 
	# а информацию из словаря — по ключу. 
	# Проверим
	print(icecream_db[0])
	# будет напечатано: 
	# {'name': 'Золотое мороженое', 'description': 'Шарики таитянского ... съесть.'}

	print(icecream_db[1]['description'])
	# будет напечатано: Чёрное мороженое ... мрак, отрицание.

Код, описывающий базу данных, традиционно хранят в файле models.py. Мы верны
традициям и чтим стандарты: в директории приложения icecream создадим файл
для «как бы базы данных».

	icecream
	├── models.py  # база данных, новый файл
	├── views.py  # view-функции
	└── urls.py  # список url приложения
 

Чтобы view-функции могли работать с данными из базы (в нашем случае
— со списком словарей) — нужно импортировать models.py в файл views.py. 

	# файл icecream/views.py

	# импортируем в код содержимое файла models.py 
	from . import models  

	def icecream_list(request):   
		# получаем данные: полный список сортов мороженого 
		db_query = models.icecream_db

		# собирать текст для вывода лучше всего через f-строку:
		# строчная часть пишется обычным текстом, переменные указываются в фигурных скобках.
		# в f-строках все переменные автоматически приводятся к строчному типу, это удобно
		icecreams = f'Список мороженого: {db_query}'

		# возвращаем результат в браузер пользователя
		return HttpResponse(icecreams)

скрин_1.jpg

Чтобы вам было удобнее выполнять задания - мы подготовили шпаргалку.
(Шпаргалка_Первое_Приложение.pdf)
Откройте ее в соседнем окошке или распечатайте и держите под рукой. 

===============================================================================
Тренажер - проект

Задача:

Вначале предполагалось, что на страницу будет выведен список названий сортов,
а вместо этого на странице — полное описание каждого мороженого. Надо поправить.

Измените view-функцию icecream_list() так, чтобы выводились только названия
сортов через разделитель :: Результат должен быть такой:

Список сортов мороженого: Золотое мороженое :: Готическое мороженое ::
Мороженое паста карбонара :: ...

Исправьте функцию icecream_list() в файле icecream/views.py:

    создайте переменную icecreams, она должна хранить пустую строку;
    в цикле переберите все элементы списка сортов мороженого;
    извлеките из каждого элемента название мороженого (оно хранится в поле name);
    добавьте это имя к строке icecreams, вставив между названиями разделитель ::.

Эта строка вернётся в ответ на запрос в объекте HttpResponse.

Подсказка:

Подготовьте пустую строку: icecreams = '', в нее вы будете добавлять названия
сортов мороженого.

Пройдитесь циклом for i in range(len(icecream_db)): по списку icecream_db из
файла models.py.

Для каждого элемента списка:

    Из поля name запросите название мороженого: icecream_db[i]['name'].
    
	В f-строке объедините полученное название с разделителем ::
	(поставьте пробелы до и после разделителя): f'{icecream_db[i]["name"]} :: '.
    
	Получившуюся строку добавьте к строке icecreams: 
	icecreams += f'{icecream_db[i]["name"]} :: '.

Проект в папке progect_1
===============================================================================
