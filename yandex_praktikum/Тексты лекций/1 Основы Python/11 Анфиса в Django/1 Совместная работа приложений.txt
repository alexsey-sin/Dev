Совместная работа приложений

В структуре проекта Anfisa4friends предусмотрено, что кроме приложений
«домашняя страница» и «мороженое» в проект будет встроена Анфиса, которая
займётся поиском друга в базе, выяснением города, в котором тот живёт и,
запросив погоду в этом городе, даст рекомендацию, надо ли сейчас есть
полученное мороженое.

Пора подключить Анфису. Поселим её в приложение anfisa: все файлы этого
приложения будут храниться в одноимённой директории в корне проекта.

Начнем с самого простого, со словаря друзей:

	friends_db = {
		'Дима': 'Астана',
		'Соня': 'Екатеринбург',
		'Стёпа': 'Калязин',
		'Андрей': 'Ульяновск',
		'Артём': 'Переделкино',
		'Антон': 'Орск',
		'Коля': 'Красноярск',
		'Лера': 'Полевской',
	} 

Поскольку это не просто словарь, а «почти база данных» — место ему в файле
anfisa/models.py.

Структура проекта станет такой: 

	├── anfisa4friends
	│   ├── settings.py
	│   └── urls.py
	├── anfisa
	│   └── models.py 
	├── icecream
	│   ├── models.py  
	│   ├── views.py
	│   └── urls.py
	├── homepage
	│   ├── views.py
	│   └── urls.py
	├── templates  
	│   ├── icecream
	│   │   ├── icecream-detail.html
	│   │   └── icecream-list.html   
	│   └── homepage
	│       └── homepage.html
	└── manage.py

Получить доступ к словарю friends_db можно из любого файла проекта. Достаточно
импортировать его в код:

	from anfisa.models import friends_db 

Теперь словарь доступен и с ним можно работать. Для эксперимента попробуем его распечатать.

	from anfisa.models import friends_db

	print(friends_db)
	# будет напечатано: {'Соня': 'Екатеринбург', ... 'Артём': 'Переделкино'} 

Хорошая новость: файлы urls.py и views.py в приложении anfisa не понадобятся.
Обработкой запросов и выводом займутся другие приложения проекта.

В практических заданиях вы соберёте все данные, разбросанные по разным
приложениям, на главную страницу.

Начинаем готовить пользовательский интерфейс проекта.

Чтобы вам было удобнее выполнять задания - мы подготовили шпаргалку.
Откройте ее в соседнем окошке или распечатайте и держите под рукой. 

===============================================================================
Тренажер - проект

Задача 1/3:

Добавим вывод списка мороженого на главную.

    Импортируйте список icecream_db из models.py приложения icecream в файл
	homepage/views.py. Обратите внимание: сейчас вы импортируете код из файла,
	который лежит в другой директории.
    
	В homepage/views.py настройте view-функцию index() так, чтобы она вывела
	список названий мороженого и ссылку «Узнать состав» рядом с каждым названием.
    
	Название от ссылки отделите символом | и пробелами. Ссылка должна вести
	на страницу с описанием сорта мороженого. Результат должен выглядеть так:

 Золотое мороженое | Узнать состав
 Готическое мороженое | Узнать состав
 ...
  

[Спойлер: да, вы уже делали подобное]
Выведите список мороженого в шаблон index.html. Словарь context и вызов render() уже есть в коде, вам нужно только изменить HTML-шаблон.

Подсказка:

    При импорте кода в файл homepage/views.py укажите, из какой директории вы
	импортируете код: from icecream.models import icecream_db
    
	Для каждого элемента в цикле должна создаваться такая строка:
	f'{icecream_db[i]["name"]} | <a href="icecream/{i}/">Узнать состав</a><br>'
    
	Вывод значения из словаря context в шаблон записывается так:
	{{ имя_ключа }} А чтобы HTML-теги не показывались на странице
	в виде текста — добавьте к имени ключа опцию safe: {{ имя_переменной | safe }}

Проект в папке project_1_1

Задача 2/3:

Выведите список друзей на главную страницу.

    Зарегистрируйте приложение anfisa в settings.py
    В файл homepage/views.py импортируйте список friends_db из anfisa/models.py.
    В файле homepage/views.py добавьте в функцию index() ещё один цикл: пройдитесь
	в нём по словарю friends_db и создайте строку friends, в которой будут
	храниться имена друзей, разделённые HTML-тегом <br>: Дима
    Соня
    ... Лера
    Переменную friends добавьте в словарь context.
    Выведите список друзей на главную страницу.

Подсказка:

    В список INSTALLED_APPS добавьте ещё один элемент; не забудьте запятую
	и кавычки.
    
	Импорт пишется так: from директория.имя_файла import имя_объекта.
    
	В цикле for friend in friends_db: переменная friend будет содержать
	ключ элемента, то есть имя друга; оно-то вам и нужно.
    
	Объединить имя друга и тег <br> лучше всего через f-строку:
	f'{friend}<br>'. Каждую получившуюся строчку из имени и тега добавляйте
	к переменной friends (эту переменную нужно создать заранее, вне цикла).
    
	В словарь context передаётся переменная icecreams. Аналогичным образом
	передайте в этот словарь и переменную friends с ключом 'friends'.
    
	Чтобы вывести информацию из словаря context в шаблон, нужно в двойных
	фигурных скобках указать ключ того элемента, значение которого надо
	вывести: {{ ключ_словаря }}

Проект в папке project_1_2

Задача 3/3:

После того, как вы перенесли список сортов мороженого на главную, страница
icecream/ потеряла свою актуальность.

Пришло время избавиться от лишнего: безжалостной рукой удалите из кода все
упоминания о странице icecream/.

Удалите:

    Строчку в urls.py приложения icecream, вызывающую функцию icecream_list()
    
	View-функцию icecream_list()
    
	Шаблон, отвечающий за вывод страницы icecream/
    
	Ссылку «Вернуться к списку» в шаблоне icecream-detail.html и тег разрыва
	строки перед ней.

Для удаления файла кликните по его названию в навигаторе правой кнопкой мыши
и в выпадающем меню выберите нужное действие.

Подсказка:

    В файле icecream/urls.py удалите path('', views.icecream_list)
    В файле icecream/views.py удалите view-функцию icecream_list()
    Удалите файл templates/icecream/icecream-list.html (правый клик по названию файла)
    В файле templates/icecream/icecream-detail.html удалите строку
	<a href="../">Вернуться к списку</a> и тег <br> перед ней.

Проект в папке project_1_3
===============================================================================
