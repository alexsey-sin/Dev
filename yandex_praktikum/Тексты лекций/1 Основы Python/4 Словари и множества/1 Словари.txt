Словари

До сих пор вы хранили данные в списках. Например, у Анфисы есть список друзей
пользователя. А список английских слов, которые кто-то из этих друзей хочет
выучить, мог бы выглядеть так:

	english_words = ['hand', 'leg', 'back-end developer'] 

Гораздо удобнее было бы хранить переводы слов с русского на английский,
чтобы забытые слова было легко подсмотреть.

Для этого в Python есть структура данных dict. Вот как она выглядит:

	english = {
		'рука': 'hand',
		'нога': 'leg',
		'бэкенд-разработчик': 'back-end developer'
	} 

Словарь оформляется фигурными скобками. Его заполняют пары, записанные
через запятую. Первый элемент в паре называется ключ, а второй — значение,
они разделяются между собой двоеточием. Русские слова здесь ключи,
а их переводы на английский — значения.

Когда запрашивают в словаре значение, соответствующее определённому ключу,
это называется «доступ по ключу». Так можно получить значение для какого-нибудь
ключа и заменить его:

	english = {
		'рука': 'hand',
		'нога': 'leg',
		'бэкенд-разработчик': 'back-end developer'
	}

	# доступ по ключу: как по-английски рука?
	print(english['рука'])  # будет напечатано слово hand

	english['рука'] = 'arm'
	# значение для ключа 'рука' поменялось с 'hand' на 'arm' - другой допустимый перевод

Ключи в словаре похожи на индексы списков. Только индексами выступают натуральные
числа, а ключами бывают и числа обоих типов, и строки, и даже булевы значения
True и False: 

	garden = {
		'земляника': 'ягода',
		'яблоко': 'фрукт',
		'лук': ['овощ', 'оружие']  # значением может быть список
	}

	print(garden['лук'])
	# будет напечатано ['овощ', 'оружие']

	garden = {
		'земляника': 'ягода',
		'яблоко': 'фрукт',
		['морковь', 'кабачок']: 'овощ'  # а так нельзя! ключом список быть не может
	}

	print(garden[['морковь', 'кабачок']])  # получится ошибка

При этом в одном словаре не может быть двух одинаковых ключей.

Чтобы получить все ключи словаря, нужно вызвать метод keys(), а если нужны все
значения — метод values():

	# 1) получаем ключи словаря
	favorite_songs = {
		'Тополиный пух': 'Иванушки international',
		'Город золотой': 'Аквариум',
		'Звезда по имени Солнце': 'Кино'
	}

	print(favorite_songs.keys())
	# будет напечатан список песен
	# dict_keys(['Тополиный пух', 'Город золотой', 'Звезда по имени Солнце'])

	# 2) получаем значения словаря
	old_letters = {'ять': 'Ѣ', 'юс малый': 'Ѧ', 'юс большой': 'Ѫ'}

	print(old_letters.values())
	# будет напечатан список начертаний старинных букв
	# dict_values(['Ѣ', 'Ѧ', 'Ѫ'])

Чтобы такие списки использовать в коде, их обычно превращают в строки
методом join():

	# словарь отчеств
	patronymic = {'Илья': 'Ильич', 'Иван': 'Ивановна', 'Пётр': 'Петровна'}
	print(", ".join(patronymic.values()))
	# выводится строка: Ильич, Ивановна, Петровна

Чтобы вам было удобнее решать задачи - мы подготовили шпаргалку(py04.pdf).
Откройте ее в соседнем окошке или распечатайте и держите под рукой. 

===============================================================================
Тренажер

Задача 1/2:

Научим Анфису хранить в словаре записи о друзьях и получать к ним доступ по ключу.
Напечатайте на экран город, в котором живёт Серёга.

Подсказка:

'Серёга' — это ключ. Чтобы получить соответствующее значение в словаре friends,
нужны квадратные скобки.

******************************************
	friends = {'Серёга': 'Омск', 'Соня': 'Москва', 'Дима': 'Челябинск'}
	print (friends['Серёга']) # ваш код здесь
******************************************

Задача 2/2:

Серёга переехал в Оренбург. Получив по ключу доступ к записи о его городе,
отразите этот факт в словаре.

Подсказка:

'Серёга' — нужный ключ. Чтобы заменить соответствующее значение в словаре
friends, понадобится оператор присваивания. Имейте в виду, что Оренбург
— строка, а значит, в коде его нужно взять в кавычки.

******************************************
	friends =  {'Серёга': 'Омск', 'Соня': 'Москва', 'Дима': 'Челябинск'}

	# ваш код здесь
	friends['Серёга'] = 'Оренбург'
	print('Серёга теперь живёт в славном городе ' + friends['Серёга'])
******************************************
===============================================================================
