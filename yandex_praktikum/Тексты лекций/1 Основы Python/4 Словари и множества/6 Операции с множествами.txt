Операции с множествами

Вы умеете создавать множество из списка вызовом функции set().

	bands = ['Пикник', 'Ария', 'Блестящие', 'Блестящие']
	unique_band_names = set(bands) 

А вот что получится, если так превращать во множество строку:

	s = set('сервер')
	print(s) 

	{'в', 'е', 'с', 'р'} 

В сете собраны все буквы из слова «сервер», каждая по одному разу.
Если вы хотите добавить в множество новый элемент, примените к сету метод add().

	s.add('а') # теперь множество s выглядит как {'в', 'е', 'с', 'р', 'а'} 

Множества в Python хороши тем, что их легко объединять. Допустим, вы составляете
из двух списков новогодних песен плейлист. Да ещё так, чтобы ни одна песня не
повторялась.

Для объединения двух множеств к первому применяют метод union(), передавая ему
второе множество как аргумент:

	songs1 = {'Три белых коня', 'Happy new year', 'Снежинка'}
	songs2 = {'Last christmas', 'Снежинка', 'Happy new year'}
		
	print(songs1.union(songs2))

	{'Три белых коня', 'Снежинка', 'Last christmas', 'Happy new year'}

Если же вам хочется получить новые впечатления и узнать, какие песни есть
в плейлисте вашего друга, а в вашем нет — поможет метод difference().
Его вызов записывается как set1.difference(set2) и возвращает новое множество,
которое содержит только те элементы, которые присутствуют в set1,
но отcутствуют в set2.

	my_songs = {'Наше лето', 'Голубой вагон', 'Облака'}
	friends_songs = {'Голубой вагон', 'Облака', 'Yesterday', 'Наше лето'}
		
	print(friends_songs.difference(my_songs))

	{'Yesterday'}

Можно также найти пересечение двух множеств, то есть элементы, которые есть
в обоих. Вот, например, списки фильмов, просмотренных и вами, и вашей подругой.
Надо знать, какие фильмы можно обсуждать, не боясь спойлеров. Для этого
используется метод intersection():

	my_films = {'Форсаж', 'Достучаться до небес', 'Мстители: война бесконечности'}
	friends_films = {'Мстители: война бесконечности', 'Форсаж', 'Матрица'}
		
	print(my_films.intersection(friends_films))

	{'Мстители: война бесконечности', 'Форсаж'}

===============================================================================
Тренажер

Задача 1/3:

Если вы захотите научить Анфису играть в города, ей нужно будет уметь выбирать
город из множества городов, которые она знает, исключая те, что уже были названы.

Напишите функцию print_valid_cities, которая сравнит множество всех городов
all_cities со множеством названных городов used_cities и:

    создаст множество городов, которые ещё можно использовать,
    напечатает такое множество на экран, разделяя города запятой.

Запустите эту функцию на примерах разных множеств и посмотрите, как она работает.

Подсказка:

Используйте метод difference()

******************************************
	# напишите код функции print_valid_cities, которая
	# принимает аргументы all_cities и used_cities
	def print_valid_cities(all_cities, used_cities):
		res = all_cities.difference(used_cities)
		print(','.join(res))

	all_cities = set([
		'Абакан',
		'Астрахань',
		'Бобруйск',
		'Калуга',
		'Караганда',
		'Кострома',
		'Липецк',
		'Новосибирск'
	])

	used_cities = set(['Калуга', 'Абакан' , 'Новосибирск'])


	print_valid_cities(all_cities, used_cities)
******************************************

Задача 2/3:

Научите Анфису помогать вам с покупками в магазине. Вы хотите приготовить
два блюда и рассказываете Анфисе, какие для них нужны продукты.

Напишите функцию print_shopping_list(), которая будет получать два списка
продуктов —recipe1 и recipe2, и печатать на экран полный список покупок.

Элементы в списке не должны повторяться и должны быть выведены через запятую,
в формате обычной текстовой строки (без фигурных скобок).

Подсказка:

    Вспомните про объединение множеств и метод union().
    
	В задании даны списки (List), но объединять списки через union() нельзя.
	Преобразуйте их в множества (Set) — и всё получится.
    
	Чтобы правильно вывести строку — примените метод join()

******************************************
	def print_shopping_list(recipe1, recipe2): # напишите здесь свою функцию
		res1 = set(recipe1)
		res2 = set(recipe2)
		print(','.join(res1.union(res2)))

	pizza = ['мука', 'помидоры', 'шампиньоны', 'сыр', 'оливковое масло']
	salad = ['огурцы', 'перцы', 'помидоры', 'оливковое масло', 'листья салата']

	print_shopping_list(pizza, salad)
******************************************

Задача 3/3:

Если вам надо 5 кг помидоров для салата и 3 кг для супа, вы сразу покупаете
8 килограммов.

Напишите функцию, которая напечатает на экран, какие продукты надо купить,
и сколько их нужно. Информацию о каждом ингредиенте выводите на отдельной
строке в формате: огурцы, кг: 1.5. Каждый продукт должен присутствовать
в выводе только один раз.

Подсказка:

1) Код функции начинайте с создания множества уникальных названий продуктов.
Вызовите функцию set(), передав ей как аргумент ключи объекта dish1.

2) Объедините результат методом union() с множеством ключей словаря dish2.
Так вы дополните сет названий ингредиентов первого блюда теми ингредиентами,
что есть во втором.

3) Для каждого элемента множества уникальных названий:

    проверьте оператором in наличие такого ключа в словарях dish1 и dish2,
	при наличии сложите соответствующие этому ключу значения в какой-нибудь
	переменной;
    
	напечатайте результат на экран в правильном формате.

******************************************
	# напишите здесь функцию print_shopping_list(),
	# подобрав уникальные названия продуктов и сложив значения
	def print_shopping_list(list1, list2):
		list_keys1 = set(list1.keys())
		list_keys2 = set(list2.keys())
		list_keys = list_keys1.union(list_keys2)
		
		res_dict = dict()
		for k in list_keys:
			if k in list1.keys():
				res_dict[k] = list1[k]
			if k in list2.keys():
				if k in res_dict.keys():
					res_dict[k] += list2[k]
				else:
					res_dict[k] = list2[k]

		for name, value in res_dict.items():
			print(name + ': ' + str(value))
			
	pizza = {'мука, кг': 1,
			 'помидоры, кг': 1.5,
			 'шампиньоны, кг': 1.5,
			 'сыр, кг': 0.8,
			 'оливковое масло, л': 0.1,
			 'дрожжи, г': 50}
	salad = {'огурцы, кг': 1,
			 'перцы, кг': 1,
			 'помидоры, кг': 1.5,
			 'оливковое масло, л': 0.1,
			 'листья салата, кг': 0.4}

	print_shopping_list(pizza, salad)
******************************************
===============================================================================
