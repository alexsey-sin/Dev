Стандарт UTC

Есть несколько стандартов измерения и записи времени. Раньше в основном
придерживались GMT (англ. «Greenwich Mean Time», среднее время по гринвичскому
меридиану). Позже прежний всемирный формат был отменён и приняли новый,
определяемый атомными часами. Это UTC — «coordinated universal time»
— всемирное координированное время.

У каждой переменной типа данных datetime можно вызвать метод utcnow().
Он вернёт текущий момент времени по UTC с эталонной точностью до микросекунд.

	import datetime as dt


	moment_in_time = dt.datetime(1961, 4, 12, 9, 7, 0)  # снова старт Гагарина

	now = moment_in_time.utcnow()
	print(now)  # напечатать на экран текущий момент времени 

Более того, метод utcnow() настолько хитрый, что для его вызова необязательно
явно создавать объект типа datetime. Можно просто написать:

	print(dt.datetime.utcnow())  # будет напечатан текущий момент времени 

Однако, если вы выполните эту команду в тренажёре, то скорее всего получите
не то время, которое сейчас у вас на часах.

Дело в том, что код запускается не на вашем компьютере, а на сервере
Яндекс.Практикума. Там выставлен другой часовой пояс — нулевой по UTC.
Московское время обгоняет его на три часа, что записывается так: UTC+3.
А время в Ванкувере отстаёт на семь часов, UTC-7.

Получим текущий момент по московскому времени:

	now = dt.datetime.utcnow()
	moscow_moment = now + 3 

	Traceback (most recent call last):
	  File "main.py", line 2, in <module>
		moscow_moment = now + 3
	TypeError: unsupported operand type(s) for +: 'datetime.datetime' and 'int' 

Ничего не получается! Ошибка в строке moscow_moment = now + 3 и сообщение о том,
что нельзя сложить переменную типа datetime с переменной типа int.

Не беда! На такой случай есть тип timedelta, в котором можно сохранить
определённый промежуток времени. Этот тип тоже живёт в библиотеке dt.
А объект такого типа создаётся функцией timedelta():

	import datetime as dt


	period = dt.timedelta(hours=3) # сохраняем промежуток времени в три часа
	print(period) 

	3:00:00 

И прибавляем его к значению времени по UTC:

	now = dt.datetime.utcnow()
	period = dt.timedelta(hours=3)
		
	moscow_moment = now + period
		
	print(moscow_moment) # будет напечатано текущее время в Москве

В аргументах функции timedelta() среди прочего можно указывать days, hours,
minutes, seconds, microseconds.

Пример:

Победитель Гран-при Австралии чемпионата мира Формулы-1 2019 года,
Валттери Боттас проехал свой самый быстрый круг за 1 минуту 25 секунд
и 273250 микросекунд. Второй результат показал Льюис Хэмилтон с разницей
в 208860 микросекунд. Вычислим время самого быстрого круга Хэмилтона.

	import datetime as dt

	time_bottas = dt.timedelta(minutes=1, seconds=25,
							   microseconds=273250)
	time_hamilton = time_bottas + dt.timedelta(microseconds=208860)

	print(time_hamilton)

	0:01:25.482110 

===============================================================================
Тренажер

Задача 1/2:

Напишите функцию, которая по названию города скажет, сколько там сейчас времени.

Мы заготовили словарь UTC_OFFSET, где для каждого города записана разница
местного времени и UTC в часах.

Подсказка:

Чтобы получить текущее время, вызовите метод dt.datetime.utcnow().

Затем к текущему времени нужно прибавить промежуток, равный сдвигу относительно
UTC для города: dt.timedelta(hours = UTC_OFFSET[city]).

******************************************
	import datetime as dt


	UTC_OFFSET = {
		'Санкт-Петербург': 3,
		'Москва': 3,
		'Самара': 4,
		'Новосибирск': 7,
		'Екатеринбург': 5,
		'Нижний Новгород': 3,
		'Казань': 3,
		'Челябинск': 5,
		'Омск': 6,
		'Ростов-на-Дону': 3,
		'Уфа': 5,
		'Красноярск': 7,
		'Пермь': 5,
		'Воронеж': 3,
		'Волгоград': 4,
		'Краснодар': 3,
		'Калининград': 2
	}


	def what_time(city):
		# напишите код тела функции
		# пусть она вернет время в городе city
		time = dt.datetime.utcnow() + dt.timedelta(hours = UTC_OFFSET[city])
		return time

	print(what_time('Екатеринбург'))
******************************************

Задача 2/2:

Напишите функцию, которая по имени друга скажет, сколько у него сейчас времени.

В словаре DATABASE хранятся данные о том, кто из друзей где живёт.

Подсказка:

Чтобы получить текущее время, вызовите метод dt.datetime.utcnow().
Затем нужно взять город, в котором живет друг: city = DATABASE[friend].
И наконец, к текущему времени нужно прибавить промежуток, равный сдвигу времени
городе друга относительно UTC: dt.timedelta(hours = UTC_OFFSET[city]).

******************************************
	import datetime as dt


	DATABASE = {
		'Серёга': 'Омск',
		'Соня': 'Москва',
		'Дима': 'Челябинск',
		'Алина': 'Красноярск',
		'Егор': 'Пермь'
	}

	UTC_OFFSET = {
		'Санкт-Петербург': 3,
		'Москва': 3,
		'Самара': 4,
		'Новосибирск': 7,
		'Екатеринбург': 5,
		'Нижний Новгород': 3,
		'Казань': 3,
		'Челябинск': 5,
		'Омск': 6,
		'Ростов-на-Дону': 3,
		'Уфа': 5,
		'Красноярск': 7,
		'Пермь': 5,
		'Воронеж': 3,
		'Волгоград': 4,
		'Краснодар': 3,
		'Калининград': 2
	}


	def what_time(friend):
		# напишите код тела функции
		# пусть она вернет время у друга из аргумента friend
		now = dt.datetime.utcnow()
		delta_hours = UTC_OFFSET[DATABASE[friend]]
		curent_now = now + dt.timedelta(hours = delta_hours)
		return curent_now

	print(what_time('Алина'))
******************************************
===============================================================================
