Финальное задание: страница редактирования поста и тесты

Протестируйте проект Yatube

Большую часть заданий вы выполнили в течение уроков. Все они будут проверены.
Если вы что-то не успели сделать — самое время этим заняться.

Ниже перечислены все тесты, которые нужно было сделать в уроках и отмечено,
какие ещё тесты нужно написать.

Тестирование Models

Если вы не выполнили задания в уроке «Unittest в Django. Models» — выполните их:

Протестируйте модели приложения posts в Yatube.

Добавьте в классы Post и Group поле __str__ (если его ещё нет):

    для класса Post — первые пятнадцать символов поста: **post.text[:15];
    для класса Group — название группы.

Протестируйте, правильно ли отображается значение поля __str__ в объектах моделей.

Никаких дополнительных тестов для моделей писать не нужно.

Тестирование URLs

Если вы не выполнили задания в уроке «Unittest в Django. URLs» — выполните их:

    Проверьте доступность страниц в соответствии с правами пользователей.
    Должны быть протестированы:
        главная страница /,
        страница группы /group/<slug>/,
        страница создания поста /new/;
    Обратитесь по URL к следующим страницам и проверьте, вызываются ли для них
	ожидаемые шаблоны:
        главная страница /,
        страница группы /group/<slug>/,
        страница создания поста /new/.
    Допишите новые тесты:
    Проверьте по URL доступность страниц:
        профайла пользователя /<username>/,
        отдельного поста /<username>/<post_id>/,
        Проверьте доступность страницы редактирования поста
		/<username>/<post_id>/edit/ для
        анонимного пользователя;
        авторизованного пользователя — автора поста;
        авторизованного пользователя — не автора поста.
        Проверьте, какой шаблон вызывается для страницы редактирования поста
		/<username>/<post_id>/edit/
        Проверьте, правильно ли работает редирект со страницы
		/<username>/<post_id>/edit/для тех, у кого нет прав доступа к этой странице.

Тестирование Views

    Напишите тесты, проверяющие, какой шаблон будет вызван при обращении
	к view-классам через соответствующий name для:
        главной страницы,
        страницы группы,
        страницы создания поста.
    Проверьте, соответствует ли ожиданиям словарь context, передаваемый
	в шаблон при вызове
        главной страницы,
        страницы группы,
        страницы создания поста,
        страницы редактирования поста /<username>/<post_id>/edit/;
        страницы профайла пользователя /<username>/,
        страницы отдельного поста /<username>/<post_id>/,
    Проверьте, что если при создании поста указать группу, то этот пост появляется
        на главной странице сайта,
        на странице выбранной группы.
    Проверьте, что этот пост не попадает в группу, для которой не был предназначен.
    На главной странице, странице группы и на странице профайла пользователя
	проверьте паджинатор: убедитесь, что в словарь context передаётся по 10
	записей на страницу.
    Протестируйте приложение About.
    Проверьте, что:
        страницы /about/author/ и /about/tech/ доступны неавторизованному
		пользователю;
        для отображения страниц /about/author/ и /about/tech/применяются
		ожидаемые view-функции и шаблоны.
        Подобные тесты есть в проекте Todo, можно подсмотреть.
		(https://github.com/Capwell/todo)

Тестирование Forms

Если вы не выполнили задания в уроке «Unittest в Django. Forms» — выполните их:

Напишите тест для проверки формы создания нового поста (страница /new/): убедитесь,
что при отправке формы создаётся новая запись в базе данных.

Допишите новые тесты:

Проверьте, что при редактировании поста через форму на странице
/<username>/<post_id>/edit/ изменяется соответствующая запись в базе данных.

Ваша задача — написать работающие и оптимизированные тесты.

По возможности применяйте методы setUp или setUpClass; однотипные тесты пишите
через subTest..

Перед тем, как сдать проект

    Убедитесь, что ваши тесты работают
	(выполните (venv)...Dev/hw04_tests/yatube$ python manage.py test).
    Запустите тесты, скачанные из репозитория.
    (venv)...Dev/hw04_tests$ pytest
    Если тесты пройдены, отправьте проект на GitHub;

После пуша структура папок в вашем репозитории на GitHub должна быть такой:

hw04_tests
 ├── .gitignore         Список файлов и папок, скрытых от отслеживания Git
 ├── tests/             Тесты Практикума, проверяющие проект
 ├── yatube/       <--  Рабочая папка с вашим кодом проекта
 ├── pytest.ini         Конфигурация тестов Практикума
 ├── README.md          Описание проекта 
 ├── requirements.txt   Зависимости проекта 
 ├── LICENSE            Лицензия
 └── setup.cfg          Настройки тестов Практикума 

    Если в репозитории на удалённом сервере есть что-то лишнее — проверьте,
	правильно ли заполнен .gitignore, и внесите в него папки и файлы,
	которые не следует отслеживать.

Проект в папке hw04_tests