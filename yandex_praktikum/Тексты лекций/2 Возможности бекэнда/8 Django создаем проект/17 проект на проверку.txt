Если не получается отправить проект на проверку

С каждым новым спринтом домашние задания будут становиться сложнее.
Домашняя работа проходит два этапа проверки: сначала проект проверяется автотестами
на платформе, а затем вашу работу проверяет ревьюер — опытный разработчик,
который подскажет, что нужно доделать и исправить.

В этом уроке мы расскажем о распространённых причинах, по которым ваш проект
может не пройти проверку на платформе.

Если у вас не получается отправить проект на проверку, а эта инструкция не помогла
или вы в ней не разобрались — обязательно задайте вопрос в канале
#project в слаке: дежурный наставник поможет найти причину проблемы.

Проблемы общего характера

Локально тесты проходят, а на платформе выдают ошибку.
	
	Проверьте, что у вас стоит Python 3.7 (на серверах нет версии 3.8).
	
	Проверьте, что тесты не изменены локально. Бывает, что тесты на платформе
	были обновлены, а у студента остались тесты прошлой версии. Актуальные тесты
	всегда можно взять из аккаунта Яндекс.Практикума, там доступны все репозитории
	с домашними заданиями:
	git pull https://github.com/yandex-praktikum/НАЗВАНИЕ_РЕПОЗИТОРИЯ.git
	
	Проверьте, что в .gitignore не добавлены файлы, от которых зависит запуск
	проекта (например, конфигов).
	
	Убедитесь, что все необходимые файлы были включены в коммит и попали в репозиторий.
	
	Проверьте, что вы не переименовывали константы из исходного репозитория.
	Они используются при тестировании на платформе. Например: 

  PRACTICUM_TOKEN = os.getenv("PRACTICUM_TOKEN")
  
Для констант, которые берутся из переменных окружения, рекомендуется указывать
значения по умолчанию (они будут использоваться на платформе в тестах).
Например:

  SECRET_KEY = os.getenv("SECRET_KEY", default="SUP3R-S3CR3T-K3Y-F0R-MY-PR0J3CT")
   

Проверьте регистр названий папок и файлов (Git может не увидеть изменения регистра
имени файла или папок). Команда git config core.ignorecase false сделает Git
чувствительным к регистру. Информация по настройке есть здесь.
(https://stackoverflow.com/questions/52950/how-to-make-git-ignore-changes-in-case)

Проект не загружается на платформу.

Проверьте, не переименован ли репозиторий.
Проверьте, что актуальная версия проекта находится в ветке master.
Если проект загружался архивом, он может не соответствовать формату GitHub.
MacOS может создавать несовместимые с нашей платформой архивы, и это вызывает ошибки.
Если вы столкнётесь с проблемой при загрузке архива на платформу — создайте
архив средствами GitHub: в интерфейсе репозитория есть кнопка Download ZIP.
Нажав на неё, вы получите архив, который загрузится на платформу без проблем.

Проблемы Django-приложений
Локально тесты проходят, а на платформе падают.

    Самая распространённая причина: в проекте используются модули, которых нет
		в зависимостях. Необходимо включить дополнительные модули в requirements.txt
		(pip freeze > requirements.txt) или не использовать их вообще без острой
		необходимости.
    Приложение не добавлено в INSTALLED_APPS в settings.py
    Приложения, которые вы создаёте, в списке INSTALLED_APPS должны быть подключены
		после стандартных, а не перед ними.
    Отсутствуют миграции в репозитории.
    Что делать: создайте миграции командой python3 manage.py makemigrations
    В settings.py указаны пути вида BASE_DIR/'static'. В последних версиях Django
		в сочетании с Python ≤ 3.7 такая запись может вызывать ошибку
		: TypeError: argument of type 'PosixPath' is not iterable
    Что делать: в settings.py указывайте пути так: str(BASE_DIR/'static')
		или так: os.path.join(BASE_DIR, 'static'),

