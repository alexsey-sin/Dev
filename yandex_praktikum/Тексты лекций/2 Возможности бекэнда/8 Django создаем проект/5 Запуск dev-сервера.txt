Запуск dev-сервера и первый коммит

Запуск сайта в dev-режиме

Вы установили все необходимые пакеты и развернули Django-проект Yatube:
он хотя и пуст, но уже работоспособен. Чтобы убедиться, что всё сделано
правильно — надо запустить его. Обычно веб-проекты работают на специальных
серверах, но в ходе разработки можно тестировать их, запуская прямо на рабочем
компьютере. Для такого запуска в Django встроен упрощённый сервер, его называют
«сервер разработчика», или «dev-сервер».

Управление проектом Django происходит посредством файла manage.py. Этот файл
автоматически создаётся в рабочей директории проекта; в вашем проекте этот файл
лежит в директории yatube_poject/yatube.

Для управления проектом этот файл запускают в Python и передают ему команды:

	(venv)...Dev/yatube_poject/yatube$ python3 manage.py какая_то_команда 

Так можно управлять Django-проектом: запускать его, останавливать, создавать
в проекте новые приложения и выполнять множество других операций.

Запускаем!

Откройте терминал и прейдите в корневую директорию проекта yatube_poject
Активируйте виртуальное окружение
Перейдите в папку с manage.py — yatube_poject/yatube
Введите команду, запускающую сервер в режиме разработки
	python3 manage.py runserver

	...Dev/yatube_poject$ source venv/bin/activate
	# для windows: source venv/Scripts/activate

	(venv)...Dev/yatube_poject$ cd yatube

	(venv)...Dev/yatube_poject/yatube$ python3 manage.py runserver

	Watching for file changes with StatReloader
	Performing system checks...

	System check identified no issues (0 silenced).

	You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
	Run 'python manage.py migrate' to apply them.

	March 05, 2021 - 04:27:33
	Django version 2.2.19, using settings 'yatube.settings'
	Starting development server at http://127.0.0.1:8000/
	Quit the server with CONTROL-C.

В ответ на команду Django сообщает, что сервер запущен и проект доступен
по адресу http://127.0.0.1:8000/. Дополнительно Django указывает на 17
каких-то недоделок, unapplied migration(s). Django хочет обновить базу данных,
добавив в неё необходимую информацию. Для выполнения текущих задач в этом нет
необходимости, так что подумаем об этом позже.

А сейчас — откройте ссылку http://127.0.0.1:8000/ в любом браузере и насладитесь
успехом.

Предполётная подготовка и первый коммит

Сделана большая часть работы: фреймворк Django установлен, проект работает.
Настало время сохранить все изменения в Git и отправить их в удалённый репозиторий.
Пока что ваш репозиторий yatube_project на GitHub выглядит точно так же, как в
момент создания: пуст и безлюден.

Отправить внесённые изменения на сервер GitHub можно в две команды
(не спешите их выполнять):

    git commit -m "Комментарий, описывающий изменения" сохранит внесённые
	вами изменения: Git создаст коммит, «точку восстановления».
	Если впоследствии вы в какой-то момент сломаете код — можно будет вернуться
	к этой точке и начать всё сначала. После выполнения команды коммит будет
	сохранён локально, на вашем компьютере.
    
	git push отправит коммит на удалённый сервер (если у вас есть несколько
	незапушенных коммитов — на сервер будут отправлены они все). После этого
	внесённые изменения будут доступны на GitHub всем, у кого есть доступ к
	вашему репозиторию: например, ревьюеры Яндекс.Практикума смогут проверить
	вашу работу.

Но перед отправкой в Git нужно подготовить репозиторий и проект к работе.

Настройка gitignore

Важно убедиться, что на GitHub не будут отправлены файлы и папки, которые
не нужно отслеживать. Всё, что не нужно отправлять в Git, должно быть перечислено
в файле .gitignore.
