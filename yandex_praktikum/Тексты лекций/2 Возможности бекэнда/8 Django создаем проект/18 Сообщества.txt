Сообщества

Если вы сделали не все задания, которые были запланированы в ходе спринта
— обязательно доделайте их. Если всё готово — переходите к домашнему заданию.

Как работать с репозиторием итогового проекта спринта

Для выполнения заданий по доработке Yatube вам потребуется некоторая подготовка,
как в этом спринте, так и в последующих.

Для этой домашней работы в вашем аккаунте на GitHub был автоматически создан
новый репозиторий: hw02_community. В нём лежат тесты для проверки домашки и
файл зависимостей requirements.txt. 

Клонируйте этот репозиторий себе на компьютер — точно так же, как вы клонировали
свой репозиторий для Yatube при создании проекта.

Перенесите в репозиторий файлы вашего проекта (всю папку yatube, где лежит
manage.py и директории posts, yatube etc.). Не переносите директории с
виртуальным окружением.

В репозитории должна получиться такая структура:

	Dev
	 └── hw02_community
		 ├── .github/           Служебная папка с настройками репозитория (она вам не понадобится)
		 ├── .gitignore         Список файлов и папок, скрытых от отслеживания Git
		 ├── .git/              Служебная информация Git (скрытая)
		 ├── tests/             Тесты Практикума, проверяющие проект  
		 ├── yatube/      <--   Рабочая папка с вашим кодом проекта
		 ├── pytest.ini         Конфигурация тестов Практикума
		 ├── README.md          Описание проекта 
		 ├── requirements.txt   Зависимости проекта 
		 ├── LICENSE            Лицензия
		 └── setup.cfg          Настройки тестов Практикума

В файл requirements.txt репозитория hw02_community уже добавлены необходимые
библиотеки. Не изменяйте его.

Разверните в репозитории виртуальное окружение: в папке Dev/hw02_community/
выполните команду ...Dev/hw02_community$ python3 -m venv venv

Активируйте виртуальное окружение.

В виртуальном окружении установите зависимости:

	(venv)...Dev/hw02_community$ pip install -r requirements.txt

После переноса файлов проекта и установки виртуального окружения структура
папок на локальном компьютере в репозитории домашки должна выглядеть примерно так:

Dev
└── hw02_community
  ├── .github/           Служебная папка с настройками репозитория (она вам не понадобится)
  ├── .gitignore         Список файлов и папок, скрытых от отслеживания Git
  ├── .vscode/           Служебная папка редактора (опционально, скрытая)
  ├── .git/              Служебная информация Git (скрытая)
  ├── tests/             Тесты Практикума, проверяющие проект
  ├── venv/              Виртуальное окружение
  ├── yatube/      <--   Рабочая папка с вашим кодом проекта
  ├── pytest.ini         Конфигурация тестов Практикума
  ├── README.md          Описание проекта 
  ├── requirements.txt   Зависимости проекта 
  ├── LICENSE            Лицензия
  └── setup.cfg          Настройки тестов Практикума

Выполните задание.

Запустите тесты, скачанные из репозитория.

	(venv)...Dev/hw02_community$ pytest

Если тесты пройдены, отправьте проект на GitHub; вы уже создавали коммиты и
пушили их на сервер в уроке «Запуск dev-сервера и первый коммит», там можно
подсмотреть необходимые команды.

После пуша структура папок в вашем репозитории на GitHub должна быть такой:

hw02_community
 ├── .github/           Служебная папка с настройками репозитория (она вам не понадобится)
 ├── .gitignore         Список файлов и папок, скрытых от отслеживания Git
 ├── tests/             Тесты Практикума, проверяющие проект
 ├── yatube/       <--  Рабочая папка с вашим кодом проекта
 ├── pytest.ini         Конфигурация тестов Практикума
 ├── README.md          Описание проекта 
 ├── requirements.txt   Зависимости проекта 
 ├── LICENSE            Лицензия
 └── setup.cfg          Настройки тестов Практикума

Если в репозитории на удалённом сервере есть что-то лишнее — проверьте, правильно
ли заполнен .gitignore и внесите в него папки и файлы, которые не следует
отслеживать: инструкция есть в уроке «Запуск dev-сервера и первый коммит».

По окончании следующего спринта надо будет повторить эту операцию: перенести файлы
проекта в следующий репозиторий, установить там виртуальное окружение и зависимости
из requirements.txt.

Задание: сообщества в Yatube

Вы знаете уже достаточно, чтобы попробовать свои силы в развитии проекта.
Ваша задача — создать сообщества для публикаций. Дайте блогеру возможность
опубликовать пост не только у себя в ленте, но и выбрать группу, в которой
появится этот пост. Сообщества создаются администрацией сайта, посетители не
смогут их добавлять. При публикации записи автор может выбрать одно сообщество
и отправить туда свой пост.

Сообщество должно иметь следующие свойства:

    Имя (title).
    Адрес (slug) — уникальный адрес группы, часть URL (например, для группы
		любителей котиков slug будет равен cats: group/cats).
    Описание (description) — текст, который появится на странице сообщества.

Вам надо:

    Создать модель сообщества с названием Group. Не забудьте указать в модели
		метод __str__, чтобы при печати объекта на экран выводилось поле title.
    Добавить в модель Post свойство group, чтобы при добавлении новой записи можно
		было сослаться на сообщество (на модель Group). Указывать сообщество при
		публикации необязательно, поэтому в параметрах свойства group укажите
		blank=True, null=True.
    Создать view-функцию group_posts, она должна возвращать страницу сообщества
		и выводить на ней дюжину новых записей. Адрес страницы сообщества должен
		быть /group/<slug>/. Если адрес сообщества не найден, выводите код
		ошибки 404.
    Подготовить шаблон group.html, он будет передаваться в render() во
		view-функции group_posts().

Пост в сообществе — это просто пост, у которого в поле group указано, какому
сообществу он принадлежит.

Файл posts/views.py должен выглядеть примерно так:

	from django.shortcuts import render, get_object_or_404

	from .models import Post, Group

	def index(request):
		# эта функция у вас уже есть

	# view-функция для страницы сообщества
	def group_posts(request, slug):
		# функция get_object_or_404 получает по заданным критериям объект из базы данных 
		# или возвращает сообщение об ошибке, если объект не найден
		group = get_object_or_404(Group, slug=slug)

		# Метод .filter позволяет ограничить поиск по критериям. Это аналог добавления
		# условия WHERE group_id = {group_id}
		posts = Post.objects.filter(group=group).order_by("-pub_date")[:12]
		return render(request, "group.html", {"group": group, "posts": posts})

Обратите внимание на функцию get_object_or_404(), это удобный и простой инструмент.
Функция ищет в базе объект модели и если не находит — прерывает работу view-функции
и возвращает страницу с ошибкой 404. 

Создайте и настройте шаблон group.html в директории templates, передайте в него
контекст, выведите переменные в нужные части шаблона.

После этого страница сообщества должна возвращаться пользователю примерно в таком
виде:

	<!doctype html>
	<html>
	  <head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<title>Записи сообщества Лeв Толстой | Yatube</title>
	  </head>
	  <body>
		<h1>Лeв Толстой</h1>
		<p>
			Цитаты Льва Толстого
		</p>

		<h3>
			Автор: Лев Толстой, дата публикации: 31 Jul 1854
		</h3>
		<p>[Фокшаны.] Еще переходъ до Фокшанъ, во время котораго я ѣхалъ съ Монго. Человѣкъ пустой, но съ твердыми, хотя и ложными убѣжденіями. Генерал[у] по этому должно быть случаю, угодно было спрашивать о моемъ здоровьи. Свинья! К[о]вырялъ носъ и ничего не написалъ — вотъ 2 упрека за нын[ѣшній] день. Послѣдній упрекъ становится слишкомъ частъ, хотя походъ и можетъ служить въ немъ отчасти извиненіемъ. Отношенія мои съ товарищами становятся такъ пріятны, что мнѣ жалко бросить штабъ. Здоровье кажется (2) лучше.</p>
		<hr>

		<h3>
			Автор: Лев Толстой, дата публикации: 30 Jul 1854
		</h3>
		<p>[Рымник.] Сдѣлалъ верхомъ переходъ до Рымника. [[5]] Старикъ все не кланяется мнѣ. Обѣ вещи эти злятъ меня. Съ встрѣчавшимися баши-бузуками велъ себя хорошо. Объяснился съ Крыжановскимъ. Онъ, не знаю зачѣмъ, совѣтуетъ мнѣ прикомандироваться къ казачьей батареѣ; совѣтъ, которому я не послѣдую. Желчно спорилъ вечеромъ съ Фриде и Бабарыкинымъ, ругалъ Сержпутовскому и ничего не сдѣлалъ, вотъ 3 упрека, которыя дѣлаю себѣ за нынѣшній день. (3)</p>
		<hr>

		<h3>
			Автор: Лев Толстой, дата публикации: 29 Jul 1854
		</h3>
		<p>Исправленіе мое идетъ прекрасно. Я чувствую, какъ отношенія мои становятся пріятны и легки съ людьми всякаго рода, съ тѣхъ поръ какъ я рѣшился быть скромнымъ и убѣдился въ томъ, что казаться всегда величественнымъ и непогрѣшнымъ вовсе не есть необходимость. Я очень веселъ. И дай Богъ, какъ мнѣ кажется, — чтобы веселье это происходило отъ самаго меня; отъ желаній всѣмъ быть пріятнымъ, скромности, необидчивости и внимательности за вспышками. — Тогда бы я всегда былъ веселъ и почти всегда счастливъ. Утромъ рѣшилъ было сидѣть дома, позаниматься, но дѣло не пошло и не утерпѣлъ вечеромъ, чтобы не пойдти пошляться.

	Идя отъ ужина, мы съ Тишк[евичемъ] остановились у бардели и насъ накрылъ Крыжановскій, что, признаюсь, было мнѣ не совсѣмъ пріятно. Упрекаю себя за безхарактерность, что не высидѣлъ дома, и зa праздность цѣлаго дня. Это главный пунктъ. (2)</p>
		<hr>

	  </body>
	</html>

Проект в папке hw02_community