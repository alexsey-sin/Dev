Страница создания и редактирования постов

В ходе спринта вы должны были расширить проект Yatube:

    Добавить статические страницы /about/author/ и /about/tech/.
    
	Подключить паджинатор, разделяющий список постов по десять на страницу:
		1. На главной странице.
		2. На странице профайла.
		3. На странице группы.
    
	Создать страницу пользователя /<username>/
    
	Создать отдельную страницу поста /<username>/<post_id>/

Проверьте, что вся эта работа выполнена, а страницы доступны. Если что-то не сделано
или не работает — самое время это исправить.

Задание 1: страница для публикации постов

У зарегистрированных пользователей Yatube всё ещё нет возможности самостоятельно
публиковать посты. Пора сделать форму для публикации новых записей.

    Добавьте в шапку сайта ссылку «Новая запись», она должна быть видна только
	авторизованным пользователям и вести на страницу /new/
    
	На странице /new/ создайте форму для добавления новой публикации
        view-функция для страницы /new/ должна называться new_post;
        name для path() страницы /new/ должен быть new_post;
        в контекст шаблона страницы /new/ должна передаваться переменная form.
		Она должна содержать объект PostForm, в котором будут два поля:
            text (обязательное для заполнения поле);
            group (необязательное для заполнения);
        после валидации формы и создания нового поста автор должен быть
		перенаправлен на главную страницу проекта.

Задание 2: страница редактирования постов

Добавьте страницу редактирования записи.
Она должна иметь адрес /<username>/<post_id>/edit/.
View-функцию для этой страницы назовите post_edit().

Права на редактирование поста должны быть только у автора этого поста.
Остальные пользователи должны перенаправляться на страницу просмотра поста.

При генерации страницы передайте в контекст переменную form, в ней должно
быть два поля: text и group.

Для генерации страницы редактирования должен быть использован тот же HTML-шаблон,
что и для страницы создания нового поста.

Расширьте этот шаблон: при редактировании поста заголовок «Добавить запись»
должен заменяться на «Редактировать запись». Надпись на кнопке отправки формы
тоже должна зависеть от операции: «Добавить» для новой записи и «Сохранить»
— для редактирования.

В HTML-шаблонах списка постов и отдельного поста настройте ссылку «Редактировать»
так, чтобы она вела на страницу редактирования поста.

Как работать с репозиторием итогового проекта спринта

Все задания в конце спринтов, в которых вы будете дорабатывать приложение
Yatube, потребуют некоторой подготовки.

    Для этой домашней работы в вашем аккаунте на GitHub был автоматически создан
		новый репозиторий: hw03_forms. В нём лежат тесты для проверки домашки
		и файл зависимостей requirements.txt.
    Клонируйте этот репозиторий себе на компьютер.
    Перенесите в репозиторий файлы вашего проекта (всю папку yatube,
		где лежит manage.py и директории posts, yatube etc.).
		Не переносите директории с виртуальным окружением.
    В репозитории должна получиться такая структура:

		Dev
		└── hw03_forms
		  ├── .gitignore         Список файлов и папок, скрытых от отслеживания Git
		  ├── .git/              Служебная информация Git (скрытая)
		  ├── tests/             Тесты Практикума, проверяющие проект  
		  ├── yatube/      <--   Рабочая папка с вашим кодом проекта
		  ├── pytest.ini         Конфигурация тестов Практикума
		  ├── README.md          Описание проекта 
		  ├── requirements.txt   Зависимости проекта 
		  ├── LICENSE            Лицензия
		  └── setup.cfg          Настройки тестов Практикума
  

    В файл requirements.txt репозитория hw03_forms уже добавлены необходимые
		библиотеки. Не изменяйте его.
    Разверните в репозитории виртуальное окружение: в папке Dev/hw03_forms/
		выполните команду ...Dev/hw03_forms$ python3 -m venv venv
    Активируйте виртуальное окружение.
    В виртуальном окружении установите зависимости:
    (venv)...Dev/hw03_forms$ pip install -r requirements.txt

После переноса файлов проекта и установки виртуального окружения структура
папок на локальном компьютере в репозитории домашки должна выглядеть примерно так:

		Dev
		 └── hw03_forms
			 ├── .gitignore         Список файлов и папок, скрытых от отслеживания Git
			 ├── .vscode/           Служебная папка редактора VSC (опционально, скрытая)
			 ├── .git/              Служебная информация Git (скрытая)
			 ├── tests/             Тесты Практикума, проверяющие проект
			 ├── venv/              Виртуальное окружение
			 ├── yatube/      <--   Рабочая папка с вашим кодом проекта
			 ├── pytest.ini         Конфигурация тестов Практикума
			 ├── README.md          Описание проекта 
			 ├── requirements.txt   Зависимости проекта 
			 ├── LICENSE            Лицензия
			 └── setup.cfg          Настройки тестов Практикума 

Выполните задание
Запустите тесты, скачанные из репозитория.

	(venv)...Dev/hw03_forms$ pytest

Если тесты пройдены, отправьте проект на GitHub; вы уже создавали коммиты
и пушили их на сервер в уроке «Запуск dev-сервера и первый коммит»,
там можно подсмотреть необходимые команды.

После пуша структура папок в вашем репозитории на GitHub должна быть такой:

	hw03_forms
	 ├── .gitignore         Список файлов и папок, скрытых от отслеживания Git
	 ├── tests/             Тесты Практикума, проверяющие проект
	 ├── yatube/       <--  Рабочая папка с вашим кодом проекта
	 ├── pytest.ini         Конфигурация тестов Практикума
	 ├── README.md          Описание проекта 
	 ├── requirements.txt   Зависимости проекта 
	 ├── LICENSE            Лицензия
	 └── setup.cfg          Настройки тестов Практикума 

Если в репозитории на удалённом сервере есть что-то лишнее — проверьте,
правильно ли заполнен .gitignore, и внесите в него папки и файлы, которые
не следует отслеживать: инструкция есть в уроке «Запуск dev-сервера и первый коммит».

Инструкцию «Как работать с репозиторием итогового проекта спринта» вы можете
скачать в PDF (setup_homework.v.4.0.pdf), она пригодится вам при выполнении
следующих домашних заданий.

Проект в папке hw03_forms