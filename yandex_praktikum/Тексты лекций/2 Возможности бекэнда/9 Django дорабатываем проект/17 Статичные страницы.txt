Статичные страницы и класс TemplateView

Вы уже создали несколько страниц и view-функций в проекте Yatube.
Но помимо страниц с динамическим содержимым на сайте могут понадобиться
и простые статичные страницы:

    контактная информация,
    правила и помощь,
    юридическая информация

...и множество других.

В Django есть view-класс TemplateView, который создан для таких случаев.
Этот простой класс по умолчанию обрабатывает только GET-запросы и возвращает
страницу, сформированную на основе указанного шаблона и словаря контекста
(словарь не обязателен: содержимое страницы может быть описано прямо в шаблоне).

Страница в три счёта

Раз: view-класс

	# views.py
	# Импорт класса TemplateView, чтобы унаследоваться от него
	from django.views.generic.base import TemplateView


	class JustStaticPage(TemplateView):
		# В переменной template_name обязательно указывается имя шаблона,
		# на основе которого будет создана возвращаемая страница
		template_name = 'app_name/just_page.html'

Два: шаблон

	<!-- templates/app_name/just_page.html -->
	<html>
	  <head>
		<title>Очень простая страница</title>
	  </head>    
	  <body>
		<div class="header">JUST SITE</div>
		<h1>Очень простая страница</h1>
		<p>На создание этой страницы у меня ушло пять минут! Ай да я.</p>
		<div class="footer">© JUST SITE, все права </div>
	  </body>
	</html>

Три: путь

	# urls.py
	...
	urlpatterns = [
		...
		path('justpage/', views.JustStaticPage.as_view())
	]

Готово!

По ссылке /justpage/ откроется страница с похвалой самому себе.

Можно и с контекстом

Класс TemplateView может передавать в шаблон словарь context, для этого
нужно дописать метод класса get_context_data():

	# views.py
	from django.views.generic.base import TemplateView


	class JustStaticPage(TemplateView):
		template_name = 'app_name/just_page.html'

		def get_context_data(self, **kwargs):
			context = super().get_context_data(**kwargs)
			# Здесь можно произвести какие-то действия для создания контекста.
			# Для примера в словарь просто передаются две строки
			context['just_title'] = 'Очень простая страница'
			context['just_text'] = 'На создание этой страницы у меня ушло пять минут! Ай да я.'
			return context

А шаблон, как и всегда, может рендериться на основе нескольких других шаблонов
и словаря context:

	<!-- templates/app_name/just_page.html -->
	<html>
	  <head>
		<title>{{ just_title }}</title>
	  </head>

	  <body>
		{% include 'includes/header.html' %}

		<h1>{{ just_title }}</h1>
		<p>{{ just_text }}</p>

		{% include 'includes/footer.html' %}
	  </body>
	</html>

Класс TemplateView отлично подходит

    для отображения простых статичных страниц, например «Об авторе» или «О компании»;
    для отображения страниц с простым контекстом;
    для отображения страниц, всё содержимое которых описано в HTML-шаблоне..

Класс TemplateView не стоит применять

    для работы с любыми HTTP-запросами, кроме GET;
    для операций CRUD. Не имеет смысла расширять класс TemplateView, для CRUD
		есть специальные классы — FormView, CreateView и UpdateView.

Особенности класса TemplateView:

    По умолчанию класс TemplateView ответит только на GET-запрос.
		На запросы других типов класс вернёт код 405: HttpResponseNotAllowed.
		(https://docs.djangoproject.com/en/3.1/ref/class-based-views/base/#django.views.generic.base.View.http_method_not_allowed)
    Класс не поддерживает формы.
    Переменная template_name (путь к файлу шаблона) обязательно должна быть
		объявлена в классе.

С остальными особенностями этого класса можно познакомиться в официальной
документации.
(https://docs.djangoproject.com/en/3.1/ref/class-based-views/base/#django.views.generic.base.TemplateView)

Задание

Создайте в проекте Yatube две статичные страницы на основе TemplateView:
«Об авторе» и «Технологии». Весь текст вставьте прямо в шаблон, словарь context
передавать не нужно.

Адреса страниц должны быть такими:

    Об авторе: about/author/
    Технологии: about/tech/

Страница «Об авторе»

На этой странице опубликуйте информацию о себе. Дайте ссылки на ваш аккаунт
в Github, на страницу вашего резюме и на любые другие ваши ресурсы в сети,
расскажите, что вас вдохновляет, как вы пришли в мир программирования и как
вы себя ощущаете в этом мире.

Если во время работы вам помогал ваш кот, собака, желтая резиновая уточка
или другое домашнее животное — обязательно упомяните об этом. В среде
программистов принято упоминать об этом; иначе вас просто могут не взять
на работу в приличную компанию!

Хорошим тоном считается выложить фотографию своей рабочей кружки или
образцового порядка на вашем рабочем столе. Картинку можно положить в
папку /static. Не забудьте уменьшить размер файла до приемлемого.

Страница «Технологии»

На этой странице можно рассказать, какие программные инструменты вы применили
для создания этого сайта, какие навыки вам помогли, с чем вы хорошо разобрались,
а с чем — не очень. Картинки и нестандартные подходы приветствуются: эта страница
может получиться очень интересной.

Приложение about

Для структурирования проекта создайте приложение about, оно будет управлять
статичными страницами, описывающими проект.

Запустите виртуальное окружение проекта и в консоли выполните из рабочей 
директории проекта команду python3 manage.py startapp about

После создания приложения не забудьте зарегистрировать его в settings.py.

urls.py для статических страниц

Все URL проекта, начинающиеся с префикса about/, должны обрабатываться в
about/urls.py.

Добавьте в головной urls.py новый path():

	urlpatterns = [
		...
		path('about/', include('about.urls', namespace='about')),
	]

Параметр namespace='about' поможет избежать конфликтов имён при обращении
к какому-либо view-классу или view-функции по имени name.

Если в posts/urls.py и в about/urls.py в каких-либо path() будет указано
одинаковое имя name (например, name='any_name'), то

    при отсутствии namespace при обращении к этим name возникнет коллизия:
	при обращении к any_name Django не поймёт, в posts/urls.py или
		в about/urls.py нужно обратиться;
    
	при наличии namespace обращение к этим name производится через
		пространство имён: posts:any_name или about:any_name;
		никаких конфликтов не будет, имя определено однозначно.

В файле about/urls.py будут обрабатываться два адреса:

	# файл about/urls.py
	from django.urls import path
	from . import views


	app_name = 'about'

	urlpatterns = [
		path('author/', views.AboutAuthorView.as_view(), name='author'),
		path('tech/', views.AboutTechView.as_view(), name='tech'),
	]

app_name = 'about' - эта строчка обязательна. Без нее namespace не сработает.

View-классы для статических страниц

Опишите два view-класса, наследующихся от TemplateView: AboutAuthorView
и AboutTechView. Каждый из них должен вызывать свой шаблон; словарь
с контекстом передавать не нужно.

	# about/views.py
	# Импортировать TemplateView

	# Описать класс AboutAuthorView для страницы about/author

	# Описать класс AboutTechView для страницы about/tech

Шаблоны для статических страниц

В директорию templates добавьте шаблоны статичных страниц. Они должны быть
доступны по адресам templates/about/author.html и templates/about/tech.html

Код шаблонов будет одинаковый, за исключением наполнения.

	<!-- templates/about/author.html -->
	{% extends "base.html" %}
	{% block title %}Об авторе проекта{% endblock %}
	{% block content %}
	{% load user_filters %}
	  <main role="main" class="container">
		<div class="row">
		  <!-- Левый вспомогательный блок -->
		  <div class="col-md-3 mb-3 mt-1">
			<div class="card">
			  <div class="card-body">
				<ul class="list-group list-group-flush">
				  <li class="list-group-item">
					<div class="h3">
					  Об авторе
					</div> 
				  </li>
				  <li class="list-group-item">
					<div class="h6 text-muted">
					  Полезный короткий текст
					</div>
				  </li>
				</ul>                                               
			  </div>                    
			</div>                
		  </div>
		  <!-- Тело страницы -->
		  <div class="col-md-9">
			<div class="card-body">                    
			  <div class="card-text">
				<p>Текст страницы "Об авторе"</p>
			  </div>                    
			</div>                
		  </div>            
		</div>        
	  </main>
	{% endblock %}

Ссылки на страницы «Об авторе» и «Технологии»

Если вы всё сделали правильно — новые страницы доступны по URL уже сейчас.
Но пользователь не сможет попасть на них, пока на сайте нет ссылок на эти
страницы. Установите ссылки в подвале сайта: разместите их в шаблоне footer.html

Шаблонизатор позволяет указывать ссылки не только по URL, но и по name,
указанному в path() для каждого адреса.

Например, ссылку на страницу «Об авторе» можно указать в шаблоне двумя способами:

	<!-- Первый вариант: указать URL -->
	<a href="/about/author/">Об авторе</a>

	<!-- Второй вариант: дать ссылку через тег шаблонизатора {% url %}, указав в нём name.
	Строка "about:" указывает на используемое пространство имён 
	и позволяет избегать конфликтов в names -->
	<a href="{% url 'about:author' %}">Об авторе</a>

Мы рекомендуем указывать ссылку через тег {% url %}. Этот вариант принят
за best practices, и не просто так: такой подход даёт больше свободы при
разработке проекта и при рефакторинге.

Например, если потребуется изменить URL страницы или группы страниц — нужно
будет лишь изменить адреса в urls.py, а менять код шаблонов не придётся.



