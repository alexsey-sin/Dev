JOIN-запросы

Прекрасный способ сделать выборку из нескольких таблиц — это запрос с ключевым
словом JOIN. В JOIN-запросе можно указать тип связи между таблицами и условие
их объединения.

Тип связи для JOIN может быть указан ключевыми словами FULL, OUTER/INNER, LEFT/RIGHT.
Если тип связи явно не указан, то применяется INNER JOIN.

В запросе блок JOIN идёт сразу после блока FROM:

	SELECT
		-- Имена столбцов результата
		Таблица1.ИмяСтолбца1,
		...
	FROM
		-- Запрашиваем данные ИЗ таблицы Таблица1
		Таблица1
	-- к результатам из Таблица1 ПРИСОЕДИНИТЬ данные из таблицы Таблица2
	JOIN Таблица2
		-- Условия объединения
		ON Таблица1.ИмяСтолбцаN = Таблица2.ИмяСтолбцаM
	WHERE
		-- Дополнительные условия

см. скрин_6.jpg

Так вы уже умеете, вы делали это в прошлом уроке:

	SELECT 
	  author.name,
	  book.title,
	  book.year
	FROM 
	  author,
	  book
	WHERE
	  book.year = 1886 AND book.author_id = author.id;

Аналогичный запрос с ключевым словом JOIN выглядит так:

	SELECT 
	-- ВЫБРАТЬ данные из колонок //указываем имена колонок вместе с именем таблицы//
		author.name,
		book.title,
		book.year
	FROM 
		-- Запрашиваем данные ИЗ ТАБЛИЦЫ author
		author
	-- к результатам ПРИСОЕДИНИТЬ данные из таблицы book
	JOIN book
		-- показать только те записи, в которых
		-- значение поля book.author_id равно значению поля author.id
		ON book.author_id = author.id
	WHERE
		-- из всего найденного показать только те результаты, 
		-- где значение поля book.year равно "1886"
		book.year = 1886;

Результат обоих запросов будет одинаков:

	name               title                                                year      
	----------------  ---------------------------------------------------   ---------
	Лев Толстой        Власть тьмы, или Коготок увяз, всей птичке пропасть  1886      
	Антон Чехов        О вреде табака                                       1886
	Софья Ковалевская  Воспоминания о Джордже Эллиоте                       1886

Но только JOIN может без особых ухищрений сделать запрос «SQL, найди мне всех авторов
в таблице author, у которых нет ни одной книги в таблице book»:

    SELECT 
      author.id,
      author.name,
      author.birth_year
    FROM 
      author
    LEFT JOIN book
      ON book.author_id = author.id
    WHERE
      book.title IS NULL;

Результат:

    id  name            birth_year
    --  --------------  -----------
    4   Насон Грядущий  3019

При обработке запроса JOIN в вычислениях участвуют две таблицы, которые условно
называют «левая» и «правая». «Левая» — это та, которая вызвана в блоке FROM,
«правая» указывается после ключевого слова JOIN.

Запрос JOIN позволяет назначить одну из таблиц «главной», а из другой таблицы
вывести данные, связанные с найденными в «главной».

Тип этой связи может быть указан ключевыми словами FULL OUTER, INNER, LEFT, RIGHT.
По умолчанию применяется INNER.

Ключевое слово назначает «главной» таблицей «левую» (при LEFT JOIN) или «правую»
(при RIGHT JOIN). В примере запроса о писателях без книг «левая» таблица — это
author, а «правая» — book.

При запросах FULL OUTER JOIN и INNER JOIN таблицы равнозначны, «главной» нет.

Вот фрагмент базы данных детского сада. В таблице А собраны мальчики, в таблице
Б — девочки. Дети одеты в карнавальные костюмы.

	-- Табл. А    Табл. Б

	id costume    id  costume
	-- --------   --  ---------
	1  Пират      1   Жучка
	2  Снежинка   2   Пират
	3  Котик      3   Принцесса
	4  Буратино   4   Котик

Дети не очень понимают как себя вести, но воспитатель хочет, чтобы они все вместе
начали что-то делать. В зависимости от задач дети будут разбиваться на пары или
собираться в какие-то группы.

    INNER JOIN выберет из перечисленных таблиц только те записи, у которых
	совпадают значения заданных в условии ON полей. Подойдёт для танцев, где
	каждому участнику нужна пара в таком же костюме. Находим одинаковых и
	отправляем на сцену, остальных не показываем. Пусть сидят у стенки на стульчиках.
	
	-- вернуть все поля из таблицы TableA
	SELECT * FROM TableA
	-- дополнительно запросить данные из таблицы TableB
	INNER JOIN TableB
		-- и возвращать записи, в которых 
		-- для значения TableA.costume найдено такое же в TableB.costume
		ON TableA.costume = TableB.costume;

	-- Ответ:

	id costume    id  costume
	-- --------   --  ---------
	1  Пират      2   Пират
	3  Котик      4   Котик

Графическое представление INNER JOIN

см. скрин_7.jpg

При запросе FULL OUTER JOIN выводятся все записи из обеих таблиц. Те записи,
у которых запрошенные значения совпадают — выводятся парами, остальные выводятся
поодиночке. Всё примерно так же, как в прошлом примере, но те, у кого нет
пары — тоже выходят на сцену.

	SELECT * FROM TableA
	FULL OUTER JOIN 
		TableB
	ON 
		TableA.costume = TableB.costume;

	-- Ответ:

	id    costume    id    costume
	----  --------   ----  ---------
	1     Пират      2     Пират
	2     Снежинка   null  null
	null  null       1     Жучка
	3     Котик      4     Котик
	null  null       3     Принцесса
	4     Буратино   null  null

см. скрин_8.jpg

LEFT JOIN — в результат попадают все подходящие записи из левой таблицы,
а из правой — только записи, отвечающие условию в блоке ON. Всех мальчиков
просят выйти и стать в ряд, и только те девочки, для которых есть пара, могут
стать рядом с мальчиками.

	SELECT * FROM TableA
	LEFT JOIN 
		TableB
	ON 
		TableA.costume = TableB.costume;

	-- Ответ:

	id costume    id    costume
	-- --------   ----  ---------
	1  Пират      2     Пират
	2  Снежинка   null  null
	3  Котик      4     Котик
	4  Буратино   null  null

см. скрин_9.jpg

RIGHT JOIN — в результат попадают все подходящие записи из правой таблицы,
а из левой — только записи, отвечающие условию в блоке ON. Все девочки выходят
на сцену, а мальчиков выпускают только тех, для кого есть пара.

	SELECT * FROM TableA
	RIGHT JOIN 
		TableB
	ON 
		TableA.costume = TableB.costume;

	-- Ответ:

	id   costume    id    costume
	---- --------   ----  ---------
	null  null       1    Жучка
	1     Пират      2    Пират
	null  null       3    Принцесса
	3     Котик      4    Котик

см. скрин_10.jpg

В зависимости от конкретной базы синтаксис JOIN-запросов может меняться,
но обычно есть возможность выбрать необходимую комбинацию модификаторов INNER,
LEFT, RIGHT, и FULL OUTER для создания необходимого JOIN-запроса.

см. скрин_11.jpg

===============================================================================
Тренажер

Задача 1/3:

Напишите запрос, который выведет:

    номер транзакции — id_transaction из таблицы transactions
    название категории — category из таблицы products
    название продукта — name из таблицы products

Условие присоединения — равенство значений в полях products.id_product и
transactions.id_product. Названия полей результирующей таблицы: id_transaction,
category, name.
Выведите 10 строк. Отсортируйте данные по возрастанию номера транзакции.
Для этого в SQL есть условия ORDER BY имя_колонки и LIMIT количество_строк.

Подсказка:

Примените INNER JOIN таблицы products по условию
products.id_product = transactions.id_product.

	SELECT 
		id_transaction, category, name
	FROM
		transactions
	INNER JOIN products ON products.id_product = transactions.id_product
	ORDER BY id_transaction

	LIMIT 10

Задача 2/3:

В базе данных есть ещё таблица со списком магазинов: products_stores.
Перед выполнением задания загляните в эту таблицу: запрос SELECT * FROM
products_stores покажет вам её структуру и содержимое. Восстановить прекод
можно нажатием на кнопку «Обновить»

Проверьте: все ли продукты из products продаются в продуктовых магазинах
products_stores?

Напишите запрос, который выберет:

    id_product из таблицы products
    name из таблицы products
    id_store из таблицы products_stores

Присоедините таблицу products_stores к таблице products методом LEFT JOIN по
полю id_product.
Полям результирующей выборки дайте имена: id_product, name, id_store.

Подсказка:

Примените LEFT JOIN по условию products_stores.id_product = products.id_product

	SELECT 
		products.id_product, products.name, products_stores.id_store
	FROM
		products 
	LEFT JOIN products_stores ON products.id_product = products_stores.id_product

Задача 3/3:

За период, позднее 5 июня 2019 года выведите номер транзакции; название магазина,
где она произошла; категорию и название приобретённого продукта.
Выберите:

    id_transaction из таблицы transactions
    name_store из таблицы stores
    category из таблицы products
    name из таблицы products

Методом JOIN соедините таблицу transactions с таблицей products по полю id_product;
затем соедините transactions со stores по полю id_store.
В блоке WHERE укажите условие по дате '2019-06-05'.
Выведите поля: id_transaction, name_store, category, name.

Подсказка:

	В блоке WHERE укажите условие так: transactions.date > '2019-06-05'.

	SELECT 
		id_transaction, name_store, category, name
	FROM
		transactions
	INNER JOIN products ON transactions.id_product = products.id_product
	INNER JOIN stores ON transactions.id_store = stores.id_store
	WHERE transactions.date > '2019-06-05'
===============================================================================
