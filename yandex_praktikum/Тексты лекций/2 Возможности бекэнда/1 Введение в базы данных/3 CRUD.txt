CRUD создать, прочитать, обновить, удалить

После создания таблицы в нее можно добавлять записи. Проще всего представлять себе,
что каждая новая запись — это строка, а поля — это ячейки таблицы.

Операции с данными часто именуют сокращением CRUD:

    Create — создать запись
    Read — прочитать данные
    Update — обновить запись
    Delete — удалить запись

Добавление записей: INSERT

Синтаксис добавления новой записи в таблицу выглядит так:

	INSERT INTO <имя таблицы> (<имя столбца>[, <имя столбца2>, ...])
	VALUES (<значение>[, <значение2>, ...]); 

Для того чтобы добавить несколько записей — отправим несколько запросов INSERT
(«вставить»):

	INSERT INTO author (name, birth_year) VALUES ('Человек без селезёнки', 1860);
	-- ВСТАВИТЬ строку В ТАБЛИЦУ author
	-- заполнить поля (name, birth_year) ЗНАЧЕНИЯМИ 'Человек без селезёнки', 1860
		соответственно

	INSERT INTO author (name, birth_year) VALUES ('Владимир Набоков', 1899);
	INSERT INTO author (name, birth_year) VALUES ('Лев Толстой', 1828);
	INSERT INTO author (name, birth_year) VALUES ('Насон Грядущий', 3019);
	INSERT INTO author (name, birth_year) VALUES ('Юрий Олеша', 1899);
	INSERT INTO author (name, birth_year) VALUES ('Николай Чернышевский', 1828);
	INSERT INTO author (name, birth_year) VALUES ('Андрей Платонов', 1899);

Пусть база сама присваивает номера уникальных ключей, для поля id передавать
значения мы не будем.

Чтение записей: SELECT

Синтаксис запросов на чтение:

	SELECT 
		<перечень столбцов>
	FROM
		<перечень таблиц>
	WHERE
		<условия>;

В ответ на запрос SELECT данные возвращаются в структурированном табличном виде.
Чтобы не путаться в понятиях «таблица БД» и «таблица с ответом» будем называть
возвращаемые данные «результирующая выборка».

Прочитаем записи которые мы добавили в таблицу:

	-- ВЫБРАТЬ поля id, name, birth_year
	SELECT
		id,
		name,
		birth_year
	-- ИЗ ТАБЛИЦЫ author
	FROM
		author;

Если нам нужно получить все поля, то вместо их перечисления можно использовать
символ *:

	SELECT * FROM author; 

Этот запрос вернёт результат:

	-- ВЫБРАТЬ данные из всех колонок ИЗ ТАБЛИЦЫ author
	SELECT * FROM author; 

	-- Ответ (вот ты какая, «результирующая выборка»!):
	id     name                  birth_year
	-----  --------------------  ------------
	1      Человек без селезёнки 1860
	2      Владимир Набоков      1899
	3      Лев Толстой           1828
	4      Насон Грядущий        3019 
	5      Юрий Олеша            1899
	6      Николай Чернышевский  1828
	7      Андрей Платонов       1899

Чтобы показать только записи, содержащие в определённом поле уникальное значение
— применяют оператор DISTINCT. Синтаксис такой:

	SELECT DISTINCT column1
	FROM table_name;

Этот запрос выберет все строки с уникальными записями в column1.

Если мы хотим получить какую-то определённую запись, то в запросе надо указать
условия. Для этого существует команда WHERE:

	-- ВЫБРАТЬ данные из всех колонок ИЗ таблицы author 
	-- только в той строке, У КОТОРОЙ в поле id указано значение 3
	SELECT * FROM author WHERE id=3;

	-- Ответ:
	id     name                  birth_year
	-----  --------------------  ------------
	3      Лев Толстой           1828 

Изменение записей: UPDATE
Для обновления данных в существующей записи предназначена команда UPDATE

	UPDATE <таблица>
	SET <столбец> = <значение>[, <столбец2> = <значение>, ...]
	WHERE <условие>; 

Чтобы изменить запись с id = 1, можно использовать такой запрос:

	-- ОБНОВИТЬ таблицу author 
	-- и ЗАПИСАТЬ в поле name значение 'Антон Чехов' 
	-- только в той строке, У КОТОРОЙ в поле id указано значение 1
	UPDATE author SET name = 'Антон Чехов' WHERE id=1; 

Если не указать условие и отправить запрос UPDATE author SET name = 'Антон Чехов',
то изменится значение name абсолютно всех записей в таблице: в БД окажутся семь
Антонов Чеховых с разными годами рождения.

Посмотрим, как изменились данные в таблице:

	-- ОБНОВИТЬ таблицу author и ЗАПИСАТЬ в поле name 
	-- значение 'Антон Чехов' в той строке, У КОТОРОЙ в поле id указано 1
	UPDATE author SET name = 'Антон Чехов' WHERE id=1;

	-- ВЫБРАТЬ данные из всех колонок ИЗ таблицы author в той строке, 
	-- У КОТОРОЙ в поле id указано 1
	SELECT * FROM author WHERE id=1;

	-- Ответ:
	id     name                  birth_year
	-----  --------------------  ------------
	1      Антон Чехов           1860 

	-- Порядок, вернули классику настоящее имя

Удаление записей: DELETE

Синтаксис запросов для удаления:

	DELETE FROM <таблица> WHERE <условие>; 

Как и в случае с UPDATE, условие WHERE имеет очень большое значение: если его не
указать, то запрос может удалить вообще все записи в таблице.

Удалим из базы автора, который пока что не входит в список лучших русскоязычных
авторов мира и проверим, что получилось.

	-- УДАЛИТЬ ИЗ таблицы author запись, У КОТОРОЙ в поле id указано значение 4
	DELETE FROM author WHERE id=4;

	-- ВЫБРАТЬ данные ИЗ таблицы author
	SELECT id, name FROM author;

	-- Ответ:
	id     name                
	-----  --------------------
	1      Антон Чехов         
	2      Владимир Набоков    
	3      Лев Толстой
	5      Юрий Олеша
	6      Николай Чернышевский
	7      Андрей Платонов
	--  Насон Грядущий has left the building

Условия запроса: WHERE

WHERE позволяет использовать множество условий одновременно. Для объединения
сразу нескольких условий используются операторы AND, OR или NOT, с этими
логическими операторами вы уже работали в теме про ветвления.

Пример:

	-- ВЫБРАТЬ поля id и name ИЗ ТАБЛИЦЫ author 
	-- в записях, У КОТОРЫХ поле birth_year=1860 ИЛИ поле birth_year=1899
	SELECT id, name FROM author WHERE birth_year=1860 OR birth_year=1899;

	-- Ответ:
	id          name       
	----------  ----------------
	1           Антон Чехов
	2           Владимир Набоков
	5           Юрий Олеша
	7           Андрей Платонов

Такой же запрос можно задать через условие вхождения значения во множество IN:

	-- ВЫБРАТЬ поля id и name ИЗ ТАБЛИЦЫ author в записях, 
	-- У КОТОРЫХ значение поля birth_year совпадает хотя бы с одним значением В СПИСКЕ (1860,1899)
	SELECT id, name FROM author WHERE birth_year IN (1860,1899);

	-- Ответ получили такой же:
	id          name       
	----------  ----------------
	1           Антон Чехов
	2           Владимир Набоков
	5           Юрий Олеша
	7           Андрей Платонов

Со скобками можно задать более сложные условия:

	SELECT * FROM author WHERE (id < 4 OR id > 5) AND birth_year = 1899;

	-- Ответ:
	id          name                  birth_year
	----------  ----------------      -----------
	2           Владимир Набоков      1899
	7           Андрей Платонов       1899

Операторы, которые вам понадобятся при составлении запросов:

    = это оператор сравнения, а не присваивания.
    > , < — больше и меньше, >= , <= — больше или равно и меньше или равно.
    <> — не равно. В некоторых базах данных применяется != в качестве оператора
		неравенства.
    BETWEEN — «между», для проверки значения в диапазоне. Например:
		birth_year BETWEEN 1850 AND 1900.
    IN — вхождение в список. Пример использования city IN ('Москва', 'Днепр').
    LIKE, ILIKE — поиск строки по шаблону и поиск строки по шаблону без учёта
		регистра. Пример: city LIKE 'Днепр%', символ % заменяет любой набор
		символов: такой маске будут соответствовать значения поля ДнепроГЭС,
		Днепр или Днепровский (а вот «днепровский», с маленькой буквы, не сработает.
		В этой ситуации нужен оператор ILIKE). Базы данных могут поддерживать и
		другие маски.

Базы данных могут иметь дополнительные функции или операторы для преобразования
строк или поиска с учетом морфологии языка.

Агрегирующие функции. Функция COUNT

В SQL есть функции для подсчёта общего количества строк, суммы, среднего значения,
максимума и минимума. Такие функции называют агрегирующие. Они собирают или
агрегируют записи (строки таблиц) по заданным условиям и затем проводят над
найденными записями какие-то операции.

Пример формата запроса с агрегирующей функцией: 

	SELECT 
		АГРЕГИРУЮЩАЯ_ФУНКЦИЯ(поле) AS result_name
		-- result_name - имя столбца результирующей выборки
	FROM
		ИмяТаблицы;

Оператор SELECT возвращает результат в виде таблицы. В случае с агрегирующей
функцией таблица будет состоять из одной колонки. Имя этой колонки задаётся
командой AS (англ. «как»).

Например, агрегирующая функция COUNT() (англ. «подсчёт») возвращает количество
строк в таблице:

	SELECT 
		-- СОСЧИТАТЬ все строки и вернуть результат В СТОЛБЦЕ ПО ИМЕНИ cnt
		COUNT(*) AS cnt
	FROM
		-- ИЗ ТАБЛИЦЫ author
		author;

	-- Ответ вернёт результат: "нашлось шесть строк" (Насона Грядущего мы удалили)
	cnt  
	-----
	6    

Для того, чтобы найти дату рождения самого старшего автора (запись с наименьшим
значением в поле birth_year) применим агрегирующую функцию MIN:

	SELECT 
		-- НАЙТИ НАИМЕНЬШЕЕ ЗНАЧЕНИЕ в колонке birth_year 
		-- и вернуть результат В СТОЛБЦЕ ПО ИМЕНИ min_year
		MIN(birth_year) AS min_year
	FROM
		author;

	-- Ответ (обратите внимание: возвращается результат подсчёта, а не запись):
	min_year  
	----------
	1828    

Существуют агрегирующие функции для подсчета числовых значений:
AVG (column) возвращает среднее значение по столбцу column.

Функция SUM(column) возвращает сумму по столбцу column.

В практических заданиях вы будете работать с базой данных товаров и продаж.
Информация хранится в таблицах products_data_all и transactions.

===============================================================================
Тренажер

Задача 1/6:

В тренажёре вам доступна база данных. Она содержит множество таблиц, но для
выполнения практических заданий вам потребуются лишь четыре из них:

products
products_data_all
products_stores
transactions

Для начала посмотрите, как устроены эти таблицы и какие данные они содержат:
к каждой таблице напишите запрос, который вернёт все её столбцы.
В этом задании не будет проверки на правильность кода. После исследования таблиц
просто нажмите «Проверить» при любом состоянии кода.

Подсказка:

Воспользуйтесь конструкцией SELECT все_столбцы FROM имя_таблицы. Чтобы выбрать все
столбцы — поставьте звёздочку после оператора SELECT.

	SELECT * FROM transactions

Задача 2/6:

Выберите столбцы id_product, name, category, name_store из таблицы
products_data_all.

Подсказка:
Воспользуйтесь конструкцией SELECT список_полей_через_запятую FROM имя_таблицы.

	SELECT id_product, name, category, name_store FROM products_data_all

Задача 3/6:

Выведите товары категории 'молоко и сливки' и цены в магазинах за определённый день.
Напишите запрос к таблице и выберите следующие поля:

    Название продукта (name)
    Цена (price)
    Название магазина (name_store)
    Дата (date_upd)

Сделайте выборку по категории (category) и дате (date_upd). Вам нужна категория
'молоко и сливки' и Всемирный день молока: '2019-06-01'.

Подсказка:

Напишите конструкцию SELECT список_полей FROM имя_таблицы WHERE имя_поля =
значение AND имя_другого_поля = другое_значение И точку с запятой в конце запроса.

	SELECT name, price, name_store, date_upd FROM products_data_all
	WHERE CATEGORY = 'молоко и сливки' AND DATE_UPD = '2019-06-01'

Задача 4/6:

Выгрузите поля name, price, name_store, date_upd категории 'молоко и сливки'
за четыре «непраздничные» субботы июня: 8, 15, 22 и 29 числа.

Подсказка:

Напишите условие с оператором IN, чтобы значение поля date_upd соответствовало
одному из перечисленных: '2019-06-08', '2019-06-15', '2019-06-22', '2019-06-29'

	SELECT 
		name, 
		price, 
		name_store, 
		date_upd 
	FROM 
		products_data_all 
	WHERE 
		category ='молоко и сливки' AND 
		date_upd IN ('2019-06-08', '2019-06-15', '2019-06-22', '2019-06-29')

Задача 5/6:

Узнайте, сколько молока и сливок купили в международный день молока. Из таблицы
transactions (англ. «транзакции») выгрузите все данные о покупках молока и сливок
за 1 июня 2019 года.

В поле date зафиксировано время покупки, данные в нём хранятся в формате «дата».
Напишите запрос, чтобы выбрать только продажи за 1 июня.

Имейте в виду: БД умеет сравнивать данные в формате date как числа и понимает,
что 2019-06-14 16:27:30 > 2019-05-19 22:28:47

В таблице transactions нет информации о категории товара. Мы подготовили список
c уникальными идентификаторами (id_product) товаров категории 'молоко и сливки':
(0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49,
50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71,
72, 73, 74, 75,76, 77, 78, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96,
97, 98, 99, 100, 102, 103, 104, 105,106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
116, 118, 119, 5, 14, 27, 33, 41, 46, 62, 79, 85, 87, 94, 101, 117)

Подсказка:

Укажите условие WHERE: выберите записи со значением поля date больше '2019-06-01'
(включительно) и строго меньше '2019-06-02'. Получите те записи, у которых значение
поля id_product найдётся в списке конструкции IN(*тут_список_id*).

	SELECT 
		* 
	FROM 
		transactions
	WHERE 
		ID_PRODUCT IN (0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19,
		20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40,
		42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
		63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,76, 77, 78, 80, 81, 82,
		83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104,
		105,106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 5, 14,
		27, 33, 41, 46, 62, 79, 85, 87, 94, 101, 117)
		AND DATE >= '2019-06-01' AND DATE < '2019-06-02'

Задача 6/6:

Напишите запрос, подсчитывающий общее количество строк в таблице products_data_all.
Колонку в результирующей выборке назовите cnt.

Подсказка:
Примените агрегирующую функцию COUNT(*). Полученные значения сохраните AS cnt.

	SELECT 
		COUNT(*) AS cnt
	FROM
		products_data_all
	
===============================================================================
